---
/**
 * Admin Categories Management Page
 */
import AdminLayout from '../../components/admin/AdminLayout.astro';
import Modal from '../../components/admin/Modal.astro';
import { requireAdminAuth } from '../../utils/supabase';

// Secure authentication check
const authResult = await requireAdminAuth(Astro.cookies, Astro.request);

// Redirect if not authenticated
if (!authResult.authenticated) {
  return Astro.redirect(authResult.redirect);
}

const { session } = authResult;
---

<AdminLayout title="Categories" activePage="categories" session={session}>
  <div class="space-y-8">
    <!-- Header -->
    <div class="flex items-center justify-between">
      <div>
        <h1 class="text-3xl font-bold text-gray-900">Categories</h1>
        <p class="mt-2 text-gray-600">Manage award categories</p>
      </div>
      <button
        id="addCategoryBtn"
        class="px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 transition-colors font-medium"
      >
        + Add Category
      </button>
    </div>

    <!-- Filter -->
    <div class="bg-white border border-gray-200 rounded-lg p-4">
      <div class="flex flex-wrap gap-4">
        <select id="eventFilter" class="px-4 py-2 border border-gray-300 rounded-lg focus:outline-hidden focus:ring-2 focus:ring-blue-500">
          <option value="">All Events</option>
        </select>
        <select id="visibilityFilter" class="px-4 py-2 border border-gray-300 rounded-lg focus:outline-hidden focus:ring-2 focus:ring-blue-500">
          <option value="">All</option>
          <option value="visible">Visible Only</option>
          <option value="hidden">Hidden Only</option>
        </select>
        <select id="tagFilter" class="px-4 py-2 border border-gray-300 rounded-lg focus:outline-hidden focus:ring-2 focus:ring-blue-500">
          <option value="">All Tags</option>
        </select>
      </div>
    </div>

    <!-- Categories List -->
    <div id="categoriesList" class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
      <!-- Loading state -->
      <div class="col-span-full text-center py-12">
        <p class="text-gray-500">Loading categories...</p>
      </div>
    </div>

    <!-- Add/Edit Modal -->
    <Modal id="categoryModal" title="Add Category">
      <form id="categoryModalForm" class="space-y-6 max-w-full">
        <input type="hidden" id="categoryId" name="id" />
        
        <!-- Basic Info Section -->
        <div class="space-y-4">
          <h3 class="text-lg font-medium text-gray-900 border-b pb-2">Basic Information</h3>

          <div class="grid grid-cols-1 md:grid-cols-2 gap-8">
            <div class="min-w-0">
              <label for="name" class="block text-sm font-medium text-gray-700 mb-1">
                Name *
              </label>
              <input
                type="text"
                id="name"
                name="name"
                required
                class="w-full px-2.5 py-2 border border-gray-300 rounded-lg focus:outline-hidden focus:ring-2 focus:ring-blue-500"
                placeholder="e.g., Best VR Experience"
              />
            </div>

            <div class="min-w-0">
              <label for="slug" class="block text-sm font-medium text-gray-700 mb-1">
                URL Slug
              </label>
              <input
                type="text"
                id="slug"
                name="slug"
                pattern="[a-z0-9-]+"
                class="w-full px-2.5 py-2 border border-gray-300 rounded-lg focus:outline-hidden focus:ring-2 focus:ring-blue-500 font-mono text-sm"
                placeholder="e.g., best-vr-experience"
              />
              <p class="text-xs text-gray-500 mt-1">Auto-generated from name if left empty</p>
            </div>
          </div>

          <div>
            <label for="description" class="block text-sm font-medium text-gray-700 mb-1">
              Description
            </label>
            <textarea
              id="description"
              name="description"
              rows="3"
              class="w-full px-2.5 py-2 border border-gray-300 rounded-lg focus:outline-hidden focus:ring-2 focus:ring-blue-500"
              placeholder="Brief description of this category..."
            ></textarea>
          </div>

          <div>
            <label for="additional_info" class="block text-sm font-medium text-gray-700 mb-1">
              Additional Info
            </label>
            <textarea
              id="additional_info"
              name="additional_info"
              rows="2"
              class="w-full px-2.5 py-2 border border-gray-300 rounded-lg focus:outline-hidden focus:ring-2 focus:ring-blue-500"
              placeholder="Entry requirements, guidelines, etc."
            ></textarea>
          </div>

          <div class="grid grid-cols-1 md:grid-cols-2 gap-8">
            <div class="min-w-0">
              <label for="sort_order" class="block text-sm font-medium text-gray-700 mb-1">
                Display Order
              </label>
              <input
                type="number"
                id="sort_order"
                name="sort_order"
                min="0"
                class="w-full px-2.5 py-2 border border-gray-300 rounded-lg focus:outline-hidden focus:ring-2 focus:ring-blue-500"
                placeholder="0"
              />
            </div>
            
            <div class="min-w-0">
              <label class="block text-sm font-medium text-gray-700 mb-1">
                Visibility
              </label>
              <label class="flex items-center space-x-2 px-4 py-3 border border-gray-300 rounded-lg cursor-pointer hover:bg-gray-50">
                <input
                  type="checkbox"
                  id="is_visible"
                  name="is_visible"
                  checked
                  class="w-4 h-4 text-blue-600 border-gray-300 rounded focus:ring-blue-500"
                />
                <span class="text-sm text-gray-700">Show publicly</span>
              </label>
            </div>
          </div>
        </div>

        <!-- Relationships Section -->
        <div class="space-y-4">
          <h3 class="text-lg font-medium text-gray-900 border-b pb-2">Relationships</h3>

          <div>
            <label class="block text-sm font-medium text-gray-700 mb-1">
              Events *
            </label>
            <div class="border border-gray-300 rounded-lg p-3 min-h-[80px]">
              <!-- Selected events display -->
              <div id="selectedEvents" class="flex flex-wrap gap-2 mb-2"></div>

              <!-- Event selector -->
              <select
                id="eventSelector"
                class="w-full px-3 py-2 border border-gray-200 rounded text-sm focus:outline-hidden focus:ring-2 focus:ring-blue-500"
              >
                <option value="">+ Add an event</option>
                <!-- Events will be loaded dynamically -->
              </select>
            </div>
            <p class="text-xs text-gray-500 mt-1">Select which events this category applies to</p>
          </div>

          <div>
            <label class="block text-sm font-medium text-gray-700 mb-1">
              Tags
            </label>
            <div class="border border-gray-300 rounded-lg p-3 min-h-[80px]">
              <!-- Selected tags display -->
              <div id="selectedTags" class="flex flex-wrap gap-2 mb-2"></div>

              <!-- Tag selector -->
              <select
                id="tagSelector"
                class="w-full px-3 py-2 border border-gray-200 rounded text-sm focus:outline-hidden focus:ring-2 focus:ring-blue-500"
              >
                <option value="">+ Add a tag</option>
                <!-- Tags will be loaded dynamically -->
              </select>
            </div>
          </div>
        </div>
      </form>
    </Modal>
  </div>
</AdminLayout>

<script>
  let categories: any[] = [];
  let availableTags: any[] = [];
  let availableEvents: any[] = [];
  let selectedCategoryTags: any[] = [];
  let selectedCategoryEvents: any[] = [];
  let filters = { event: '', visibility: '', tag: '' };

  // Load events
  async function loadEvents() {
    try {
      const response = await fetch('/api/events');
      const data = await response.json();
      if (!response.ok) throw new Error(data.error);

      availableEvents = data.events || [];
      updateEventSelector();
      populateEventFilter();
    } catch (error) {
      console.error('Error loading events:', error);
    }
  }

  // Load tags
  async function loadTags() {
    try {
      const response = await fetch('/api/tags');
      const data = await response.json();
      if (!response.ok) throw new Error(data.error);

      availableTags = data.tags || [];
      updateTagSelector();
      populateTagFilter();
    } catch (error) {
      console.error('Error loading tags:', error);
    }
  }

  // Populate event filter dropdown
  function populateEventFilter() {
    const eventFilter = document.getElementById('eventFilter') as HTMLSelectElement;
    if (!eventFilter) return;

    eventFilter.innerHTML = '<option value="">All Events</option>' +
      availableEvents
        .map(event => `<option value="${event.id}">${event.event_name} (${event.event_year})</option>`)
        .join('');
  }

  // Populate tag filter dropdown
  function populateTagFilter() {
    const tagFilter = document.getElementById('tagFilter') as HTMLSelectElement;
    if (!tagFilter) return;

    tagFilter.innerHTML = '<option value="">All Tags</option>' +
      availableTags
        .map(tag => `<option value="${tag.id}">${tag.name}</option>`)
        .join('');
  }

  // Get filtered categories
  function getFilteredCategories() {
    return categories.filter(category => {
      // Filter by event
      if (filters.event) {
        const hasEvent = category.events?.some((e: any) => e.id === filters.event);
        if (!hasEvent) return false;
      }

      // Filter by visibility
      if (filters.visibility === 'visible' && !category.is_visible) return false;
      if (filters.visibility === 'hidden' && category.is_visible) return false;

      // Filter by tag
      if (filters.tag) {
        const hasTag = category.tags?.some((t: any) => t.id === filters.tag);
        if (!hasTag) return false;
      }

      return true;
    });
  }

  // Update event selector dropdown
  function updateEventSelector() {
    const eventSelector = document.getElementById('eventSelector') as HTMLSelectElement;
    const selectedIds = selectedCategoryEvents.map(e => e.id);

    eventSelector.innerHTML = '<option value="">+ Add an event</option>' +
      availableEvents
        .filter(event => !selectedIds.includes(event.id))
        .map(event => `<option value="${event.id}">${event.event_name} (${event.event_year})</option>`)
        .join('');
  }

  // Update tag selector dropdown
  function updateTagSelector() {
    const tagSelector = document.getElementById('tagSelector') as HTMLSelectElement;
    const selectedIds = selectedCategoryTags.map(t => t.id);

    tagSelector.innerHTML = '<option value="">+ Add a tag</option>' +
      availableTags
        .filter(tag => !selectedIds.includes(tag.id))
        .map(tag => `<option value="${tag.id}">${tag.name}</option>`)
        .join('');
  }

  // Render selected events as badges
  function renderSelectedEvents() {
    const container = document.getElementById('selectedEvents')!;

    if (selectedCategoryEvents.length === 0) {
      container.innerHTML = '<p class="text-sm text-gray-400 italic">No events selected</p>';
      return;
    }

    container.innerHTML = selectedCategoryEvents.map(event => `
      <span class="inline-flex items-center gap-1 px-3 py-1 bg-green-100 text-green-800 rounded-full text-sm">
        ${event.event_name} (${event.event_year})
        <button
          type="button"
          onclick="removeEvent('${event.id}')"
          class="hover:bg-green-200 rounded-full p-0.5 transition-colors"
        >
          <svg class="w-3 h-3" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12" />
          </svg>
        </button>
      </span>
    `).join('');
  }

  // Render selected tags as badges
  function renderSelectedTags() {
    const container = document.getElementById('selectedTags')!;

    if (selectedCategoryTags.length === 0) {
      container.innerHTML = '<p class="text-sm text-gray-400 italic">No tags selected</p>';
      return;
    }

    container.innerHTML = selectedCategoryTags.map(tag => `
      <span class="inline-flex items-center gap-1 px-3 py-1 bg-blue-100 text-blue-800 rounded-full text-sm">
        ${tag.name}
        <button
          type="button"
          onclick="removeTag('${tag.id}')"
          class="hover:bg-blue-200 rounded-full p-0.5 transition-colors"
        >
          <svg class="w-3 h-3" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12" />
          </svg>
        </button>
      </span>
    `).join('');
  }

  // Add event
  (window as any).addEvent = (eventId: string) => {
    if (!eventId) return;

    const event = availableEvents.find(e => e.id === eventId);
    if (!event) return;

    if (!selectedCategoryEvents.find(e => e.id === eventId)) {
      selectedCategoryEvents.push(event);
      renderSelectedEvents();
      updateEventSelector();
    }
  };

  // Remove event
  (window as any).removeEvent = (eventId: string) => {
    selectedCategoryEvents = selectedCategoryEvents.filter(e => e.id !== eventId);
    renderSelectedEvents();
    updateEventSelector();
  };

  // Add tag
  (window as any).addTag = (tagId: string) => {
    if (!tagId) return;

    const tag = availableTags.find(t => t.id === tagId);
    if (!tag) return;

    if (!selectedCategoryTags.find(t => t.id === tagId)) {
      selectedCategoryTags.push(tag);
      renderSelectedTags();
      updateTagSelector();
    }
  };

  // Remove tag
  (window as any).removeTag = (tagId: string) => {
    selectedCategoryTags = selectedCategoryTags.filter(t => t.id !== tagId);
    renderSelectedTags();
    updateTagSelector();
  };

  // Handle event selector change
  document.addEventListener('DOMContentLoaded', () => {
    const eventSelector = document.getElementById('eventSelector') as HTMLSelectElement;
    eventSelector?.addEventListener('change', (e) => {
      const target = e.target as HTMLSelectElement;
      (window as any).addEvent(target.value);
      target.value = '';
    });

    const tagSelector = document.getElementById('tagSelector') as HTMLSelectElement;
    tagSelector?.addEventListener('change', (e) => {
      const target = e.target as HTMLSelectElement;
      (window as any).addTag(target.value);
      target.value = '';
    });

    // Set up filter event listeners
    const eventFilter = document.getElementById('eventFilter') as HTMLSelectElement;
    eventFilter?.addEventListener('change', (e) => {
      filters.event = (e.target as HTMLSelectElement).value;
      renderCategories();
    });

    const visibilityFilter = document.getElementById('visibilityFilter') as HTMLSelectElement;
    visibilityFilter?.addEventListener('change', (e) => {
      filters.visibility = (e.target as HTMLSelectElement).value;
      renderCategories();
    });

    const tagFilter = document.getElementById('tagFilter') as HTMLSelectElement;
    tagFilter?.addEventListener('change', (e) => {
      filters.tag = (e.target as HTMLSelectElement).value;
      renderCategories();
    });
  });

  // Load categories
  async function loadCategories() {
    try {
      const response = await fetch('/api/categories');
      const data = await response.json();
      
      if (!response.ok) throw new Error(data.error);
      
      categories = data.categories || [];
      renderCategories();
    } catch (error: any) {
      const list = document.getElementById('categoriesList')!;
      list.innerHTML = `
        <div class="col-span-full text-center py-12">
          <p class="text-red-600">Error loading categories: ${error.message}</p>
        </div>
      `;
    }
  }

  // Helper to escape HTML for safe display
  function escapeHtml(text: string): string {
    const div = document.createElement('div');
    div.textContent = text;
    return div.innerHTML;
  }

  // Helper to convert newlines to HTML
  function nl2br(text: string | null | undefined): string {
    if (!text) return '';
    const paragraphs = text.split(/\n\n+/);
    return paragraphs
      .map(para => para.trim())
      .filter(para => para.length > 0)
      .map(para => `<p class="mb-3 last:mb-0">${escapeHtml(para).replace(/\n/g, '<br>')}</p>`)
      .join('');
  }

  // Render categories
  function renderCategories() {
    const list = document.getElementById('categoriesList')!;
    const filteredCategories = getFilteredCategories();

    if (categories.length === 0) {
      list.innerHTML = `
        <div class="col-span-full text-center py-12">
          <p class="text-gray-500">No categories yet. Add your first category!</p>
        </div>
      `;
      return;
    }

    if (filteredCategories.length === 0) {
      list.innerHTML = `
        <div class="col-span-full text-center py-12">
          <p class="text-gray-500">No categories match the current filters.</p>
        </div>
      `;
      return;
    }

    list.innerHTML = filteredCategories.map(category => `
      <div class="bg-white border border-gray-200 rounded-lg p-6 hover:shadow-sm transition-shadow ${!category.is_visible ? 'opacity-60 border-dashed' : ''}">
        <div class="flex items-start justify-between mb-3">
          <div>
            <h3 class="text-lg font-semibold text-gray-900">${escapeHtml(category.name)}</h3>
            ${category.slug ? `<p class="text-xs text-gray-500 font-mono mt-1">/categories/${escapeHtml(category.slug)}</p>` : ''}
            ${!category.is_visible ? '<span class="text-xs text-orange-600 font-medium">Hidden from public</span>' : ''}
            <p class="text-xs text-gray-400 mt-1 font-mono">ID: ${category.id}</p>
          </div>
          <span class="text-xs text-gray-400">Order: ${category.sort_order || 0}</span>
        </div>
        ${category.description ? `<div class="text-sm text-gray-600 mb-4">${nl2br(category.description)}</div>` : ''}
        <div class="flex space-x-2 pt-4 border-t border-gray-100">
          <button
            onclick="editCategory('${category.id}')"
            class="flex-1 px-3 py-2 text-sm text-blue-600 hover:bg-blue-50 rounded-lg transition-colors"
          >
            Edit
          </button>
          <button
            onclick="deleteCategory('${category.id}', '${escapeHtml(category.name)}')"
            class="flex-1 px-3 py-2 text-sm text-red-600 hover:bg-red-50 rounded-lg transition-colors"
          >
            Delete
          </button>
        </div>
      </div>
    `).join('');
  }

  // Modal controls
  const modal = document.getElementById('categoryModal')!;
  const modalTitle = document.getElementById('categoryModalTitle')!;
  const form = document.getElementById('categoryModalForm') as HTMLFormElement;
  const modalError = document.getElementById('categoryModalError')!;

  function openModal(title: string) {
    modalTitle.textContent = title;
    modalError.classList.add('hidden');
    modal.classList.remove('hidden');
  }

  function closeModal() {
    modal.classList.add('hidden');
    form.reset();
    (document.getElementById('categoryId') as HTMLInputElement).value = '';
    selectedCategoryTags = [];
    selectedCategoryEvents = [];
    renderSelectedTags();
    renderSelectedEvents();
    updateTagSelector();
    updateEventSelector();
  }

  document.getElementById('addCategoryBtn')!.addEventListener('click', () => {
    selectedCategoryTags = [];
    selectedCategoryEvents = [];
    renderSelectedTags();
    renderSelectedEvents();
    updateTagSelector();
    updateEventSelector();
    openModal('Add Category');
  });

  document.getElementById('categoryModalCloseBtn')!.addEventListener('click', closeModal);
  document.getElementById('categoryModalCancelBtn')!.addEventListener('click', closeModal);

  // Edit category
  (window as any).editCategory = (id: string) => {
    const category = categories.find(c => c.id === id);
    if (!category) return;

    (document.getElementById('categoryId') as HTMLInputElement).value = category.id;
    (document.getElementById('name') as HTMLInputElement).value = category.name;
    (document.getElementById('slug') as HTMLInputElement).value = category.slug || '';
    (document.getElementById('description') as HTMLTextAreaElement).value = category.description || '';
    (document.getElementById('additional_info') as HTMLTextAreaElement).value = category.additional_info || '';
    (document.getElementById('sort_order') as HTMLInputElement).value = category.sort_order?.toString() || '0';
    (document.getElementById('is_visible') as HTMLInputElement).checked = category.is_visible !== false;
    
    // Set selected tags
    selectedCategoryTags = category.tags || [];
    renderSelectedTags();
    updateTagSelector();

    // Set selected events
    selectedCategoryEvents = category.events || [];
    renderSelectedEvents();
    updateEventSelector();

    openModal('Edit Category');
  };

  // Delete category
  (window as any).deleteCategory = async (id: string, name: string) => {
    if (!confirm(`Are you sure you want to delete "${name}"?`)) return;

    try {
      const response = await fetch('/api/categories', {
        method: 'DELETE',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ id }),
      });

      const data = await response.json();
      if (!response.ok) throw new Error(data.error);

      await loadCategories();
    } catch (error: any) {
      alert('Error deleting category: ' + error.message);
    }
  };

  // Form submit
  form.addEventListener('submit', async (e) => {
    e.preventDefault();
    modalError.classList.add('hidden');

    const formData = new FormData(form);
    const id = formData.get('id') as string;
    
    const data = {
      id: id || undefined,
      name: formData.get('name'),
      slug: formData.get('slug') || null,
      description: formData.get('description') || null,
      additional_info: formData.get('additional_info') || null,
      sort_order: formData.get('sort_order') ? parseInt(formData.get('sort_order') as string) : 0,
      is_visible: (document.getElementById('is_visible') as HTMLInputElement).checked,
      tag_ids: selectedCategoryTags.map(t => t.id),
      event_ids: selectedCategoryEvents.map(e => e.id),
    };

    // Validate at least one event is selected
    if (data.event_ids.length === 0) {
      modalError.textContent = 'Please select at least one event for this category';
      modalError.classList.remove('hidden');
      return;
    }

    try {
      const response = await fetch('/api/categories', {
        method: id ? 'PUT' : 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify(data),
      });

      const result = await response.json();
      if (!response.ok) throw new Error(result.error);

      closeModal();
      await loadCategories();
    } catch (error: any) {
      modalError.textContent = error.message;
      modalError.classList.remove('hidden');
    }
  });

  // Initial load
  Promise.all([loadEvents(), loadTags()]).then(loadCategories);
</script>

