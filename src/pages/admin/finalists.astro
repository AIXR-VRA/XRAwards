---
/**
 * Admin Finalists Management Page
 */
import AdminLayout from '../../components/admin/AdminLayout.astro';
import Modal from '../../components/admin/Modal.astro';
import MediaSelector from '../../components/admin/MediaSelector.astro';


---

<AdminLayout title="Finalists" activePage="finalists">
  <div class="space-y-8">
    <!-- Header -->
    <div class="flex items-center justify-between">
      <div>
        <h1 class="text-3xl font-bold text-gray-900">Finalists</h1>
        <p class="mt-2 text-gray-600">Manage award finalists and winners</p>
      </div>
      <button
        id="addFinalistBtn"
        class="px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 transition-colors font-medium"
     >
        + Add Finalist
      </button>
    </div>

    <!-- Filter -->
    <div class="bg-white border border-gray-200 rounded-lg p-4">
      <div class="flex flex-wrap gap-4">
        <input
          type="text"
          id="searchInput"
          placeholder="Search finalists..."
          class="px-4 py-2 border border-gray-300 rounded-lg focus:outline-hidden focus:ring-2 focus:ring-blue-500 min-w-64"
        />
        <select id="categoryFilter" class="px-4 py-2 border border-gray-300 rounded-lg focus:outline-hidden focus:ring-2 focus:ring-blue-500">
          <option value="">All Categories</option>
        </select>
        <select id="eventFilter" class="px-4 py-2 border border-gray-300 rounded-lg focus:outline-hidden focus:ring-2 focus:ring-blue-500">
          <option value="">All Events</option>
        </select>
        <select id="winnerFilter" class="px-4 py-2 border border-gray-300 rounded-lg focus:outline-hidden focus:ring-2 focus:ring-blue-500">
          <option value="">All</option>
          <option value="winners">Winners Only</option>
          <option value="finalists">Finalists Only</option>
        </select>
      </div>
    </div>

    <!-- Finalists List -->
    <div id="finalistsList" class="space-y-4">
      <!-- Loading state -->
      <div class="text-center py-12">
        <p class="text-gray-500">Loading finalists...</p>
      </div>
    </div>

    <!-- Add/Edit Modal -->
    <Modal id="finalistModal" title="Add Finalist">
      <form id="finalistModalForm" class="space-y-6 max-w-full">
          <input type="hidden" id="finalistId" name="id" />
          
          <!-- Basic Info Section -->
          <div class="space-y-4">
            <h3 class="text-lg font-medium text-gray-900 border-b pb-2">Basic Information</h3>

            <div>
              <label for="title" class="block text-sm font-medium text-gray-700 mb-1">
                Title *
              </label>
              <input
                type="text"
                id="title"
                name="title"
                required
                class="w-full px-2.5 py-2 border border-gray-300 rounded-lg focus:outline-hidden focus:ring-2 focus:ring-blue-500"
                placeholder="e.g., Amazing VR Adventure"
              />
            </div>

            <div class="grid grid-cols-1 md:grid-cols-2 gap-8">
              <div class="min-w-0">
                <label for="category_id" class="block text-sm font-medium text-gray-700 mb-1">
                  Category *
                </label>
                <select
                  id="category_id"
                  name="category_id"
                  required
                  class="w-full px-2.5 py-2 border border-gray-300 rounded-lg focus:outline-hidden focus:ring-2 focus:ring-blue-500"
               >
                  <option value="">Select a category...</option>
                </select>
              </div>

              <div class="min-w-0">
                <label for="organization" class="block text-sm font-medium text-gray-700 mb-1">
                  Organization / Company
                </label>
                <input
                  type="text"
                  id="organization"
                  name="organization"
                  class="w-full px-2.5 py-2 border border-gray-300 rounded-lg focus:outline-hidden focus:ring-2 focus:ring-blue-500"
                  placeholder="e.g., Meta, Unity, etc."
                />
              </div>
            </div>

            <div>
              <label for="finalistDescription" class="block text-sm font-medium text-gray-700 mb-1">
                Description
              </label>
              <textarea
                id="finalistDescription"
                name="description"
                rows="3"
                class="w-full px-2.5 py-2 border border-gray-300 rounded-lg focus:outline-hidden focus:ring-2 focus:ring-blue-500"
                placeholder="Brief description..."
             ></textarea>
            </div>

            <div>
              <label for="website_url" class="block text-sm font-medium text-gray-700 mb-1">
                Website URL
              </label>
              <input
                type="url"
                id="website_url"
                name="website_url"
                class="w-full px-2.5 py-2 border border-gray-300 rounded-lg focus:outline-hidden focus:ring-2 focus:ring-blue-500"
                placeholder="https://..."
              />
              <p class="text-xs text-gray-500 mt-1">Project or company site</p>
            </div>
          </div>

          <!-- Media Section -->
          <div class="space-y-4">
            <h3 class="text-lg font-medium text-gray-900 border-b pb-2">Media</h3>

            <MediaSelector 
              multiple={false}
              label="Finalist Image"
              helpText="Select one image for this finalist"
            />
          </div>

          <!-- Award Details Section -->
          <div class="space-y-4">
            <h3 class="text-lg font-medium text-gray-900 border-b pb-2">Award Details</h3>

            <div class="grid grid-cols-1 md:grid-cols-3 gap-8">
              <div class="min-w-0">
                <label for="event_id" class="block text-sm font-medium text-gray-700 mb-1">
                  Event *
                </label>
                <select
                  id="event_id"
                  name="event_id"
                  required
                  class="w-full px-2.5 py-2 border border-gray-300 rounded-lg focus:outline-hidden focus:ring-2 focus:ring-blue-500"
               >
                  <option value="">Select event...</option>
                </select>
              </div>

              <div class="min-w-0">
                <label for="placement" class="block text-sm font-medium text-gray-700 mb-1">
                  Placement
                </label>
                <input
                  type="number"
                  id="placement"
                  name="placement"
                  min="1"
                  max="10"
                  class="w-full px-2.5 py-2 border border-gray-300 rounded-lg focus:outline-hidden focus:ring-2 focus:ring-blue-500"
                  placeholder="1, 2, 3..."
                />
                <p class="text-xs text-gray-500 mt-1">1st, 2nd, 3rd, etc.</p>
              </div>

              <div class="min-w-0">
                <label class="block text-sm font-medium text-gray-700 mb-1">
                  Winner
                </label>
                <label class="flex items-center space-x-2 px-4 py-3 border border-gray-300 rounded-lg cursor-pointer hover:bg-gray-50">
                  <input
                    type="checkbox"
                    id="is_winner"
                    name="is_winner"
                    class="w-4 h-4 text-blue-600 border-gray-300 rounded focus:ring-blue-500"
                  />
                  <span class="text-sm text-gray-700">Winner</span>
                </label>
              </div>
            </div>
          </div>

          <!-- Tags Section -->
          <div class="space-y-4">
            <h3 class="text-lg font-medium text-gray-900 border-b pb-2">Tags</h3>

            <div>
              <label class="block text-sm font-medium text-gray-700 mb-1">
                Tags
              </label>
              <div class="border border-gray-300 rounded-lg p-3 min-h-[80px]">
                <!-- Selected tags display -->
                <div id="selectedFinalistTags" class="flex flex-wrap gap-2 mb-2"></div>
                
                <!-- Tag selector -->
                <select
                  id="finalistTagSelector"
                  class="w-full px-3 py-2 border border-gray-200 rounded text-sm focus:outline-hidden focus:ring-2 focus:ring-blue-500"
               >
                  <option value="">+ Add a tag</option>
                  <!-- Tags will be loaded dynamically -->
                </select>
              </div>
            </div>
          </div>
      </form>
    </Modal>
  </div>
</AdminLayout>

<script>
  let finalists: any[] = [];
  let categories: any[] = [];
  let events: any[] = [];
  let availableTags: any[] = [];
  let selectedFinalistTags: any[] = [];
  let mediaSelectorId: string = '';
  let filters = { category: '', event: '', winner: '', search: '' };

  // Load tags
  async function loadTags() {
    try {
      const response = await fetch('/api/tags');
      const data = await response.json();
      if (!response.ok) throw new Error(data.error);
      
      availableTags = data.tags || [];
      updateFinalistTagSelector();
    } catch (error) {
      console.error('Error loading tags:', error);
    }
  }

  // Update tag selector dropdown
  function updateFinalistTagSelector() {
    const tagSelector = document.getElementById('finalistTagSelector') as HTMLSelectElement;
    const selectedIds = selectedFinalistTags.map(t => t.id);
    
    tagSelector.innerHTML = '<option value="">+ Add a tag</option>' + 
      availableTags
        .filter(tag => !selectedIds.includes(tag.id))
        .map(tag => `<option value="${tag.id}">${tag.name}</option>`)
        .join('');
  }

  // Render selected tags as badges
  function renderSelectedFinalistTags() {
    const container = document.getElementById('selectedFinalistTags')!;
    
    if (selectedFinalistTags.length === 0) {
      container.innerHTML = '<p class="text-sm text-gray-400 italic">No tags selected</p>';
      return;
    }
    
    container.innerHTML = selectedFinalistTags.map(tag => `
      <span class="inline-flex items-center gap-1 px-3 py-1 bg-blue-100 text-blue-800 rounded-full text-sm">
        ${tag.name}
        <button
          type="button"
          onclick="removeFinalistTag('${tag.id}')"
          class="hover:bg-blue-200 rounded-full p-0.5 transition-colors"
       >
          <svg class="w-3 h-3" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12" />
          </svg>
        </button>
      </span>
    `).join('');
  }

  // Add tag
  (window as any).addFinalistTag = (tagId: string) => {
    if (!tagId) return;
    
    const tag = availableTags.find(t => t.id === tagId);
    if (!tag) return;
    
    if (!selectedFinalistTags.find(t => t.id === tagId)) {
      selectedFinalistTags.push(tag);
      renderSelectedFinalistTags();
      updateFinalistTagSelector();
    }
  };

  // Remove tag
  (window as any).removeFinalistTag = (tagId: string) => {
    selectedFinalistTags = selectedFinalistTags.filter(t => t.id !== tagId);
    renderSelectedFinalistTags();
    updateFinalistTagSelector();
  };

  // Handle tag selector change
  document.addEventListener('DOMContentLoaded', () => {
    const tagSelector = document.getElementById('finalistTagSelector') as HTMLSelectElement;
    tagSelector?.addEventListener('change', (e) => {
      const target = e.target as HTMLSelectElement;
      (window as any).addFinalistTag(target.value);
      target.value = '';
    });

    // Get MediaSelector ID
    const selectorElement = document.querySelector('.media-selector-component') as HTMLElement;
    if (selectorElement) {
      mediaSelectorId = selectorElement.dataset.selectorId || '';
    }
  });

  // Load events
  async function loadEvents() {
    try {
      const response = await fetch('/api/events');
      const data = await response.json();
      if (!response.ok) throw new Error(data.error);

      events = data.events || [];

      // Populate event filter
      const eventFilter = document.getElementById('eventFilter')!;
      const eventSelect = document.getElementById('event_id')!;

      events.forEach(evt => {
        const option1 = document.createElement('option');
        option1.value = evt.id;
        option1.textContent = `${evt.event_name} (${evt.event_year})`;
        eventFilter.appendChild(option1);

        const option2 = document.createElement('option');
        option2.value = evt.id;
        option2.textContent = `${evt.event_name} (${evt.event_year})`;
        eventSelect.appendChild(option2);
      });
    } catch (error) {
      console.error('Error loading events:', error);
    }
  }

  // Load categories
  async function loadCategories() {
    try {
      const response = await fetch('/api/categories');
      const data = await response.json();
      if (!response.ok) throw new Error(data.error);

      categories = data.categories || [];

      // Populate category filter
      const categoryFilter = document.getElementById('categoryFilter')!;
      const categorySelect = document.getElementById('category_id')!;

      categories.forEach(cat => {
        const option1 = document.createElement('option');
        option1.value = cat.id;
        option1.textContent = cat.name;
        categoryFilter.appendChild(option1);

        const option2 = document.createElement('option');
        option2.value = cat.id;
        option2.textContent = cat.name;
        categorySelect.appendChild(option2);
      });
    } catch (error) {
      console.error('Error loading categories:', error);
    }
  }

  // Load finalists
  async function loadFinalists() {
    try {
      const response = await fetch('/api/finalists');
      const data = await response.json();
      
      if (!response.ok) throw new Error(data.error);
      
      finalists = data.finalists || [];
      renderFinalists();
    } catch (error: any) {
      const list = document.getElementById('finalistsList')!;
      list.innerHTML = `
        <div class="text-center py-12">
          <p class="text-red-600">Error loading finalists: ${error.message}</p>
        </div>
      `;
    }
  }

  // Helper to escape HTML for safe display
  function escapeHtml(text: string): string {
    const div = document.createElement('div');
    div.textContent = text;
    return div.innerHTML;
  }

  // Helper to convert newlines to HTML
  function nl2br(text: string | null | undefined): string {
    if (!text) return '';
    const paragraphs = text.split(/\n\n+/);
    return paragraphs
      .map(para => para.trim())
      .filter(para => para.length> 0)
      .map(para => `<p class="mb-3 last:mb-0">${escapeHtml(para).replace(/\n/g, '<br>')}</p>`)
      .join('');
  }

  // Filter finalists
  function getFilteredFinalists() {
    return finalists.filter(f => {
      if (filters.category && f.category_id !== filters.category) return false;
      if (filters.event && f.event_id !== filters.event) return false;
      if (filters.winner === 'winners' && !f.is_winner) return false;
      if (filters.winner === 'finalists' && f.is_winner) return false;
      
      // Search filter
      if (filters.search) {
        const searchTerm = filters.search.toLowerCase();
        const searchableText = [
          f.title,
          f.organization,
          f.description,
          f.categories?.name,
          f.event_details?.event_name
        ].filter(Boolean).join(' ').toLowerCase();
        
        if (!searchableText.includes(searchTerm)) return false;
      }
      
      return true;
    });
  }

  // Render finalists
  function renderFinalists() {
    const list = document.getElementById('finalistsList')!;
    const filtered = getFilteredFinalists();
    
    if (filtered.length === 0) {
      list.innerHTML = `
        <div class="text-center py-12">
          <p class="text-gray-500">No finalists found. ${finalists.length> 0 ? 'Try adjusting filters.' : 'Add your first finalist!'}</p>
        </div>
      `;
      return;
    }

    list.innerHTML = filtered.map(finalist => `
      <div class="bg-white border border-gray-200 rounded-lg p-6 hover:shadow-sm transition-shadow">
        <div class="flex items-start gap-4">
          ${finalist.image_url ? `
            <img src="${escapeHtml(finalist.image_url)}" alt="${escapeHtml(finalist.title)}" loading="lazy" class="w-24 h-24 object-cover rounded-lg" />
          ` : `
            <div class="w-24 h-24 bg-gray-100 rounded-lg flex items-center justify-center">
              <span class="text-gray-400 text-xs">No image</span>
            </div>
          `}
          <div class="flex-1">
            <div class="flex items-start justify-between">
            <div>
              <h3 class="text-lg font-semibold text-gray-900">${escapeHtml(finalist.title)}</h3>
              ${finalist.organization ? `<p class="text-sm text-gray-500">${escapeHtml(finalist.organization)}</p>` : ''}
              <p class="text-sm text-gray-600 mt-1">
                ${finalist.categories?.name ? escapeHtml(finalist.categories.name) : 'Uncategorized'}
                ${finalist.event_details ? ` • ${finalist.event_details.event_year}` : ''}
                ${finalist.placement ? ` • ${finalist.placement}${finalist.placement === 1 ? 'st' : finalist.placement === 2 ? 'nd' : finalist.placement === 3 ? 'rd' : 'th'} Place` : ''}
                ${finalist.is_winner ? ' • <span class="text-yellow-600 font-medium">Winner</span>' : ''}
              </p>
              <p class="text-xs text-gray-400 mt-1 font-mono">ID: ${finalist.id}</p>
              ${finalist.description ? `<div class="text-sm text-gray-600 mt-2">${nl2br(finalist.description)}</div>` : ''}
              ${finalist.website_url ? `<a href="${escapeHtml(finalist.website_url)}" target="_blank" class="text-xs text-blue-600 hover:underline mt-1 inline-block">${escapeHtml(finalist.website_url)}</a>` : ''}
            </div>
            </div>
            <div class="flex space-x-2 mt-4">
              <button
                onclick="editFinalist('${finalist.id}')"
                class="px-3 py-2 text-sm text-blue-600 hover:bg-blue-50 rounded-lg transition-colors"
             >
                Edit
              </button>
              <button
                onclick="deleteFinalist('${finalist.id}', '${escapeHtml(finalist.title)}')"
                class="px-3 py-2 text-sm text-red-600 hover:bg-red-50 rounded-lg transition-colors"
             >
                Delete
              </button>
            </div>
          </div>
        </div>
      </div>
    `).join('');
  }

  // Filters
  document.getElementById('searchInput')!.addEventListener('input', (e) => {
    filters.search = (e.target as HTMLInputElement).value;
    renderFinalists();
  });

  document.getElementById('categoryFilter')!.addEventListener('change', (e) => {
    filters.category = (e.target as HTMLSelectElement).value;
    renderFinalists();
  });

  document.getElementById('eventFilter')!.addEventListener('change', (e) => {
    filters.event = (e.target as HTMLSelectElement).value;
    renderFinalists();
  });

  document.getElementById('winnerFilter')!.addEventListener('change', (e) => {
    filters.winner = (e.target as HTMLSelectElement).value;
    renderFinalists();
  });

  // Modal controls
  const modal = document.getElementById('finalistModal')!;
  const modalTitle = document.getElementById('finalistModalTitle')!;
  const form = document.getElementById('finalistModalForm') as HTMLFormElement;
  const modalError = document.getElementById('finalistModalError')!;

  function openModal(title: string) {
    modalTitle.textContent = title;
    modalError.classList.add('hidden');
    modal.classList.remove('hidden');
  }

  function closeModal() {
    modal.classList.add('hidden');
    form.reset();
    (document.getElementById('finalistId') as HTMLInputElement).value = '';
    selectedFinalistTags = [];
    renderSelectedFinalistTags();
    updateFinalistTagSelector();
    
    // Clear media selector
    if (mediaSelectorId && (window as any)[`clearSelectedMedia_${mediaSelectorId}`]) {
      (window as any)[`clearSelectedMedia_${mediaSelectorId}`]();
    }
  }

  document.getElementById('addFinalistBtn')!.addEventListener('click', () => {
    selectedFinalistTags = [];
    renderSelectedFinalistTags();
    updateFinalistTagSelector();
    
    // Clear media selector
    if (mediaSelectorId && (window as any)[`clearSelectedMedia_${mediaSelectorId}`]) {
      (window as any)[`clearSelectedMedia_${mediaSelectorId}`]();
    }
    
    openModal('Add Finalist');
  });

  document.getElementById('finalistModalCloseBtn')!.addEventListener('click', closeModal);
  document.getElementById('finalistModalCancelBtn')!.addEventListener('click', closeModal);

  // Edit finalist
  (window as any).editFinalist = async (id: string) => {
    const finalist = finalists.find(f => f.id === id);
    if (!finalist) return;

    (document.getElementById('finalistId') as HTMLInputElement).value = finalist.id;
    (document.getElementById('title') as HTMLInputElement).value = finalist.title;
    (document.getElementById('organization') as HTMLInputElement).value = finalist.organization || '';
    (document.getElementById('category_id') as HTMLSelectElement).value = finalist.category_id;
    (document.getElementById('finalistDescription') as HTMLTextAreaElement).value = finalist.description || '';
    (document.getElementById('website_url') as HTMLInputElement).value = finalist.website_url || '';
    (document.getElementById('event_id') as HTMLSelectElement).value = finalist.event_id || '';
    (document.getElementById('placement') as HTMLInputElement).value = finalist.placement || '';
    (document.getElementById('is_winner') as HTMLInputElement).checked = finalist.is_winner || false;
    
    // Set selected tags
    selectedFinalistTags = finalist.tags || [];
    renderSelectedFinalistTags();
    updateFinalistTagSelector();

    // Load media for this finalist
    try {
      const response = await fetch(`/api/media?finalistIds=${id}`);
      const data = await response.json();
      if (response.ok && data.media && data.media.length> 0) {
        // Set media in selector (only first one since single selection)
        if (mediaSelectorId && (window as any)[`setSelectedMedia_${mediaSelectorId}`]) {
          (window as any)[`setSelectedMedia_${mediaSelectorId}`](data.media);
        }
      } else {
        // Clear if no media
        if (mediaSelectorId && (window as any)[`clearSelectedMedia_${mediaSelectorId}`]) {
          (window as any)[`clearSelectedMedia_${mediaSelectorId}`]();
        }
      }
    } catch (error) {
      console.error('Error loading finalist media:', error);
      if (mediaSelectorId && (window as any)[`clearSelectedMedia_${mediaSelectorId}`]) {
        (window as any)[`clearSelectedMedia_${mediaSelectorId}`]();
      }
    }

    openModal('Edit Finalist');
  };

  // Delete finalist
  (window as any).deleteFinalist = async (id: string, title: string) => {
    if (!confirm(`Are you sure you want to delete "${title}"?`)) return;

    try {
      const response = await fetch('/api/finalists', {
        method: 'DELETE',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ id }),
      });

      const data = await response.json();
      if (!response.ok) throw new Error(data.error);

      await loadFinalists();
    } catch (error: any) {
      alert('Error deleting finalist: ' + error.message);
    }
  };

  // Form submit
  form.addEventListener('submit', async (e) => {
    e.preventDefault();
    modalError.classList.add('hidden');

    const formData = new FormData(form);
    const id = formData.get('id') as string;
    
    // Get selected media from MediaSelector component
    const selectedMedia = mediaSelectorId && (window as any)[`getSelectedMedia_${mediaSelectorId}`]
      ? (window as any)[`getSelectedMedia_${mediaSelectorId}`]()
      : [];
    
    const data = {
      id: id || undefined,
      title: formData.get('title'),
      organization: formData.get('organization') || null,
      description: formData.get('description') || null,
      category_id: formData.get('category_id'),
      event_id: formData.get('event_id'),
      image_url: selectedMedia.length> 0 ? selectedMedia[0].file_url : null,
      website_url: formData.get('website_url') || null,
      placement: formData.get('placement') ? parseInt(formData.get('placement') as string) : null,
      is_winner: (document.getElementById('is_winner') as HTMLInputElement).checked,
      tag_ids: selectedFinalistTags.map(t => t.id),
      media_ids: selectedMedia.map((m: any) => m.id),
    };

    try {
      const response = await fetch('/api/finalists', {
        method: id ? 'PUT' : 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify(data),
      });

      const result = await response.json();
      if (!response.ok) throw new Error(result.error);

      closeModal();
      await loadFinalists();
    } catch (error: any) {
      modalError.textContent = error.message;
      modalError.classList.remove('hidden');
    }
  });

  // Initial load
  Promise.all([loadCategories(), loadEvents(), loadTags()]).then(loadFinalists);
</script>

