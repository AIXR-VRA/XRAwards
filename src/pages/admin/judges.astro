---
/**
 * Admin Judges Management Page
 */
import AdminLayout from '../../components/admin/AdminLayout.astro';
import Modal from '../../components/admin/Modal.astro';
import MediaSelector from '../../components/admin/MediaSelector.astro';
import { createServerClient } from '@supabase/ssr';

// Check authentication
const supabase = createServerClient(
  import.meta.env.SUPABASE_URL,
  import.meta.env.SUPABASE_ANON_KEY,
  {
    cookies: {
      get(key: string) {
        return Astro.cookies.get(key)?.value;
      },
      set(key: string, value: string, options: any) {
        Astro.cookies.set(key, value, options);
      },
      remove(key: string, options: any) {
        Astro.cookies.delete(key, options);
      },
    },
  }
);

const { data: { session } } = await supabase.auth.getSession();

// Redirect if not authenticated
if (!session) {
  return Astro.redirect('/admin/login');
}
---

<AdminLayout title="Judges" activePage="judges" session={session}>
  <div class="space-y-8">
    <!-- Header -->
    <div class="flex items-center justify-between">
      <div>
        <h1 class="text-3xl font-bold text-gray-900">Judges</h1>
        <p class="mt-2 text-gray-600">Manage award judges</p>
      </div>
      <button
        id="addJudgeBtn"
        class="px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 transition-colors font-medium"
      >
        + Add Judge
      </button>
    </div>

    <!-- Filter -->
    <div class="bg-white border border-gray-200 rounded-lg p-4">
      <div class="flex flex-wrap gap-4">
        <select id="eventFilter" class="px-4 py-2 border border-gray-300 rounded-lg focus:outline-hidden focus:ring-2 focus:ring-blue-500">
          <option value="">All Events</option>
        </select>
        <select id="tagFilter" class="px-4 py-2 border border-gray-300 rounded-lg focus:outline-hidden focus:ring-2 focus:ring-blue-500">
          <option value="">All Tags</option>
        </select>
        <select id="visibilityFilter" class="px-4 py-2 border border-gray-300 rounded-lg focus:outline-hidden focus:ring-2 focus:ring-blue-500">
          <option value="">All</option>
          <option value="visible">Visible Only</option>
          <option value="hidden">Hidden Only</option>
        </select>
      </div>
    </div>

    <!-- Judges List -->
    <div id="judgesList" class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
      <!-- Loading state -->
      <div class="col-span-full text-center py-12">
        <p class="text-gray-500">Loading judges...</p>
      </div>
    </div>

    <!-- Add/Edit Modal -->
    <Modal id="judgeModal" title="Add Judge">
      <form id="judgeModalForm" class="space-y-6 max-w-full">
          <input type="hidden" id="judgeId" name="id" />

          <!-- Basic Info Section -->
          <div class="space-y-4">
            <h3 class="text-lg font-medium text-gray-900 border-b pb-2">Basic Information</h3>

            <div class="grid grid-cols-1 md:grid-cols-2 gap-8">
              <div class="min-w-0">
                <label for="first_name" class="block text-sm font-medium text-gray-700 mb-1">
                  First Name *
                </label>
                <input
                  type="text"
                  id="first_name"
                  name="first_name"
                  required
                  class="w-full px-2.5 py-2 border border-gray-300 rounded-lg focus:outline-hidden focus:ring-2 focus:ring-blue-500"
                  placeholder="e.g., John"
                />
              </div>

              <div class="min-w-0">
                <label for="last_name" class="block text-sm font-medium text-gray-700 mb-1">
                  Last Name *
                </label>
                <input
                  type="text"
                  id="last_name"
                  name="last_name"
                  required
                  class="w-full px-2.5 py-2 border border-gray-300 rounded-lg focus:outline-hidden focus:ring-2 focus:ring-blue-500"
                  placeholder="e.g., Doe"
                />
              </div>
            </div>

            <div>
              <label for="job_title" class="block text-sm font-medium text-gray-700 mb-1">
                Job Title
              </label>
              <input
                type="text"
                id="job_title"
                name="job_title"
                class="w-full px-2.5 py-2 border border-gray-300 rounded-lg focus:outline-hidden focus:ring-2 focus:ring-blue-500"
                placeholder="e.g., Senior VR Developer"
              />
            </div>

            <div>
              <label for="organization" class="block text-sm font-medium text-gray-700 mb-1">
                Organization
              </label>
              <input
                type="text"
                id="organization"
                name="organization"
                class="w-full px-2.5 py-2 border border-gray-300 rounded-lg focus:outline-hidden focus:ring-2 focus:ring-blue-500"
                placeholder="e.g., Meta Reality Labs"
              />
            </div>

            <div>
              <label for="linkedin_url" class="block text-sm font-medium text-gray-700 mb-1">
                LinkedIn URL
              </label>
              <input
                type="url"
                id="linkedin_url"
                name="linkedin_url"
                class="w-full px-2.5 py-2 border border-gray-300 rounded-lg focus:outline-hidden focus:ring-2 focus:ring-blue-500"
                placeholder="https://linkedin.com/in/username"
              />
            </div>

            <div>
              <label for="description" class="block text-sm font-medium text-gray-700 mb-1">
                Description
              </label>
              <textarea
                id="description"
                name="description"
                rows="4"
                class="w-full px-2.5 py-2 border border-gray-300 rounded-lg focus:outline-hidden focus:ring-2 focus:ring-blue-500"
                placeholder="Judge bio and background..."
              ></textarea>
            </div>

            <div class="grid grid-cols-1 md:grid-cols-2 gap-8">
              <div class="min-w-0">
                <label for="sort_order" class="block text-sm font-medium text-gray-700 mb-1">
                  Display Order
                </label>
                <input
                  type="number"
                  id="sort_order"
                  name="sort_order"
                  min="0"
                  class="w-full px-2.5 py-2 border border-gray-300 rounded-lg focus:outline-hidden focus:ring-2 focus:ring-blue-500"
                  placeholder="0"
                />
              </div>

              <div class="min-w-0">
                <label class="block text-sm font-medium text-gray-700 mb-1">
                  Visibility
                </label>
                <label class="flex items-center space-x-2 px-4 py-3 border border-gray-300 rounded-lg cursor-pointer hover:bg-gray-50">
                  <input
                    type="checkbox"
                    id="is_visible"
                    name="is_visible"
                    checked
                    class="w-4 h-4 text-blue-600 border-gray-300 rounded focus:ring-blue-500"
                  />
                  <span class="text-sm text-gray-700">Show publicly</span>
                </label>
              </div>
            </div>
          </div>

          <!-- Media Section -->
          <div class="space-y-4">
            <h3 class="text-lg font-medium text-gray-900 border-b pb-2">Media</h3>

            <MediaSelector 
              multiple={false}
              label="Profile Image"
              helpText="Select profile image for this judge"
            />
          </div>

          <!-- Relationships Section -->
          <div class="space-y-4">
            <h3 class="text-lg font-medium text-gray-900 border-b pb-2">Relationships</h3>

            <div>
              <label class="block text-sm font-medium text-gray-700 mb-1">
                Events *
              </label>
            <div class="border border-gray-300 rounded-lg p-3 min-h-[80px]">
              <!-- Selected events display -->
              <div id="selectedEvents" class="flex flex-wrap gap-2 mb-2"></div>

              <!-- Event selector -->
              <select
                id="eventSelector"
                class="w-full px-3 py-2 border border-gray-200 rounded text-sm focus:outline-hidden focus:ring-2 focus:ring-blue-500"
              >
                <option value="">+ Add an event</option>
              </select>
            </div>
            <p class="text-xs text-gray-500 mt-1">Select which events this judge is judging</p>
          </div>

          <div>
            <label class="block text-sm font-medium text-gray-700 mb-1">
              Tags
              <span class="text-xs text-gray-500 font-normal">(optional)</span>
            </label>
            <div class="border border-gray-300 rounded-lg p-3 min-h-[80px]">
              <!-- Selected tags display -->
              <div id="selectedTags" class="flex flex-wrap gap-2 mb-2"></div>

              <!-- Tag selector -->
              <select
                id="tagSelector"
                class="w-full px-3 py-2 border border-gray-200 rounded text-sm focus:outline-hidden focus:ring-2 focus:ring-blue-500"
              >
                <option value="">+ Add a tag</option>
              </select>
            </div>
          </div>
          </div>
      </form>
    </Modal>
  </div>
</AdminLayout>

<script>
  let judges: any[] = [];
  let availableEvents: any[] = [];
  let availableTags: any[] = [];
  let selectedJudgeEvents: any[] = [];
  let selectedJudgeTags: any[] = [];
  let mediaSelectorId: string = '';
  let filters = { event: '', tag: '', visibility: '' };

  // Load events
  async function loadEvents() {
    try {
      const response = await fetch('/api/events');
      const data = await response.json();
      if (!response.ok) throw new Error(data.error);

      availableEvents = data.events || [];
      updateEventSelector();
      populateEventFilter();
    } catch (error) {
      console.error('Error loading events:', error);
    }
  }

  // Load tags
  async function loadTags() {
    try {
      const response = await fetch('/api/tags');
      const data = await response.json();
      if (!response.ok) throw new Error(data.error);

      availableTags = data.tags || [];
      updateTagSelector();
      populateTagFilter();
    } catch (error) {
      console.error('Error loading tags:', error);
    }
  }

  // Populate event filter dropdown
  function populateEventFilter() {
    const eventFilter = document.getElementById('eventFilter') as HTMLSelectElement;
    if (!eventFilter) return;

    eventFilter.innerHTML = '<option value="">All Events</option>' +
      availableEvents
        .map(event => `<option value="${event.id}">${event.event_name} (${event.event_year})</option>`)
        .join('');
  }

  // Populate tag filter dropdown
  function populateTagFilter() {
    const tagFilter = document.getElementById('tagFilter') as HTMLSelectElement;
    if (!tagFilter) return;

    tagFilter.innerHTML = '<option value="">All Tags</option>' +
      availableTags
        .map(tag => `<option value="${tag.id}">${tag.name}</option>`)
        .join('');
  }

  // Get filtered judges
  function getFilteredJudges() {
    return judges.filter(judge => {
      // Filter by event
      if (filters.event) {
        const hasEvent = judge.events?.some((e: any) => e.id === filters.event);
        if (!hasEvent) return false;
      }

      // Filter by tag
      if (filters.tag) {
        const hasTag = judge.tags?.some((t: any) => t.id === filters.tag);
        if (!hasTag) return false;
      }

      // Filter by visibility
      if (filters.visibility === 'visible' && !judge.is_visible) return false;
      if (filters.visibility === 'hidden' && judge.is_visible) return false;

      return true;
    });
  }

  // Update event selector dropdown
  function updateEventSelector() {
    const eventSelector = document.getElementById('eventSelector') as HTMLSelectElement;
    const selectedIds = selectedJudgeEvents.map(e => e.id);

    eventSelector.innerHTML = '<option value="">+ Add an event</option>' +
      availableEvents
        .filter(event => !selectedIds.includes(event.id))
        .map(event => `<option value="${event.id}">${event.event_name} (${event.event_year})</option>`)
        .join('');
  }

  // Update tag selector dropdown
  function updateTagSelector() {
    const tagSelector = document.getElementById('tagSelector') as HTMLSelectElement;
    const selectedIds = selectedJudgeTags.map(t => t.id);

    tagSelector.innerHTML = '<option value="">+ Add a tag</option>' +
      availableTags
        .filter(tag => !selectedIds.includes(tag.id))
        .map(tag => `<option value="${tag.id}">${tag.name}</option>`)
        .join('');
  }

  // Render selected events as badges
  function renderSelectedEvents() {
    const container = document.getElementById('selectedEvents')!;

    if (selectedJudgeEvents.length === 0) {
      container.innerHTML = '<p class="text-sm text-gray-400 italic">No events selected</p>';
      return;
    }

    container.innerHTML = selectedJudgeEvents.map(event => `
      <span class="inline-flex items-center gap-1 px-3 py-1 bg-green-100 text-green-800 rounded-full text-sm">
        ${event.event_name} (${event.event_year})
        <button
          type="button"
          onclick="removeEvent('${event.id}')"
          class="hover:bg-green-200 rounded-full p-0.5 transition-colors"
        >
          <svg class="w-3 h-3" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12" />
          </svg>
        </button>
      </span>
    `).join('');
  }

  // Render selected tags as badges
  function renderSelectedTags() {
    const container = document.getElementById('selectedTags')!;

    if (selectedJudgeTags.length === 0) {
      container.innerHTML = '<p class="text-sm text-gray-400 italic">No tags selected</p>';
      return;
    }

    container.innerHTML = selectedJudgeTags.map(tag => `
      <span class="inline-flex items-center gap-1 px-3 py-1 bg-blue-100 text-blue-800 rounded-full text-sm">
        ${tag.name}
        <button
          type="button"
          onclick="removeTag('${tag.id}')"
          class="hover:bg-blue-200 rounded-full p-0.5 transition-colors"
        >
          <svg class="w-3 h-3" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12" />
          </svg>
        </button>
      </span>
    `).join('');
  }

  // Add event
  (window as any).addEvent = (eventId: string) => {
    if (!eventId) return;

    const event = availableEvents.find(e => e.id === eventId);
    if (!event) return;

    if (!selectedJudgeEvents.find(e => e.id === eventId)) {
      selectedJudgeEvents.push(event);
      renderSelectedEvents();
      updateEventSelector();
    }
  };

  // Remove event
  (window as any).removeEvent = (eventId: string) => {
    selectedJudgeEvents = selectedJudgeEvents.filter(e => e.id !== eventId);
    renderSelectedEvents();
    updateEventSelector();
  };

  // Add tag
  (window as any).addTag = (tagId: string) => {
    if (!tagId) return;

    const tag = availableTags.find(t => t.id === tagId);
    if (!tag) return;

    if (!selectedJudgeTags.find(t => t.id === tagId)) {
      selectedJudgeTags.push(tag);
      renderSelectedTags();
      updateTagSelector();
    }
  };

  // Remove tag
  (window as any).removeTag = (tagId: string) => {
    selectedJudgeTags = selectedJudgeTags.filter(t => t.id !== tagId);
    renderSelectedTags();
    updateTagSelector();
  };

  // Handle selector changes
  document.addEventListener('DOMContentLoaded', () => {
    const eventSelector = document.getElementById('eventSelector') as HTMLSelectElement;
    eventSelector?.addEventListener('change', (e) => {
      const target = e.target as HTMLSelectElement;
      (window as any).addEvent(target.value);
      target.value = '';
    });

    const tagSelector = document.getElementById('tagSelector') as HTMLSelectElement;
    tagSelector?.addEventListener('change', (e) => {
      const target = e.target as HTMLSelectElement;
      (window as any).addTag(target.value);
      target.value = '';
    });

    // Set up filter event listeners
    const eventFilter = document.getElementById('eventFilter') as HTMLSelectElement;
    eventFilter?.addEventListener('change', (e) => {
      filters.event = (e.target as HTMLSelectElement).value;
      renderJudges();
    });

    const tagFilter = document.getElementById('tagFilter') as HTMLSelectElement;
    tagFilter?.addEventListener('change', (e) => {
      filters.tag = (e.target as HTMLSelectElement).value;
      renderJudges();
    });

    const visibilityFilter = document.getElementById('visibilityFilter') as HTMLSelectElement;
    visibilityFilter?.addEventListener('change', (e) => {
      filters.visibility = (e.target as HTMLSelectElement).value;
      renderJudges();
    });

    // Get MediaSelector ID
    const selectorElement = document.querySelector('.media-selector-component') as HTMLElement;
    if (selectorElement) {
      mediaSelectorId = selectorElement.dataset.selectorId || '';
    }
  });

  // Load judges
  async function loadJudges() {
    try {
      const response = await fetch('/api/judges');
      const data = await response.json();

      if (!response.ok) throw new Error(data.error);

      judges = data.judges || [];
      renderJudges();
    } catch (error: any) {
      const list = document.getElementById('judgesList')!;
      list.innerHTML = `
        <div class="col-span-full text-center py-12">
          <p class="text-red-600">Error loading judges: ${error.message}</p>
        </div>
      `;
    }
  }

  // Helper to escape HTML for safe display
  function escapeHtml(text: string): string {
    const div = document.createElement('div');
    div.textContent = text;
    return div.innerHTML;
  }

  // Helper to convert newlines to HTML
  function nl2br(text: string | null | undefined): string {
    if (!text) return '';
    const paragraphs = text.split(/\n\n+/);
    return paragraphs
      .map(para => para.trim())
      .filter(para => para.length > 0)
      .map(para => `<p class="mb-3 last:mb-0">${escapeHtml(para).replace(/\n/g, '<br>')}</p>`)
      .join('');
  }

  // Render judges
  function renderJudges() {
    const list = document.getElementById('judgesList')!;
    const filteredJudges = getFilteredJudges();

    if (judges.length === 0) {
      list.innerHTML = `
        <div class="col-span-full text-center py-12">
          <p class="text-gray-500">No judges yet. Add your first judge!</p>
        </div>
      `;
      return;
    }

    if (filteredJudges.length === 0) {
      list.innerHTML = `
        <div class="col-span-full text-center py-12">
          <p class="text-gray-500">No judges match the current filters.</p>
        </div>
      `;
      return;
    }

    list.innerHTML = filteredJudges.map(judge => `
      <div class="bg-white border border-gray-200 rounded-lg p-6 hover:shadow-sm transition-shadow ${!judge.is_visible ? 'opacity-60 border-dashed' : ''}">
        <div class="flex items-start gap-4 mb-3">
          ${judge.profile_image_url ? `
            <img src="${escapeHtml(judge.profile_image_url)}" alt="${escapeHtml(judge.first_name)} ${escapeHtml(judge.last_name)}" loading="lazy" class="w-16 h-16 rounded-full object-cover flex-shrink-0" />
          ` : `
            <div class="w-16 h-16 rounded-full bg-gray-200 flex items-center justify-center flex-shrink-0">
              <span class="text-gray-500 text-lg font-semibold">${escapeHtml(judge.first_name.charAt(0))}${escapeHtml(judge.last_name.charAt(0))}</span>
            </div>
          `}
          <div class="flex-1 min-w-0">
            <div class="flex items-start justify-between">
              <div class="flex-1">
                <h3 class="text-lg font-semibold text-gray-900">${escapeHtml(judge.first_name)} ${escapeHtml(judge.last_name)}</h3>
                ${judge.job_title ? `<p class="text-sm text-gray-600">${escapeHtml(judge.job_title)}</p>` : ''}
                ${judge.organization ? `<p class="text-sm text-gray-500">${escapeHtml(judge.organization)}</p>` : ''}
                ${judge.linkedin_url ? `<a href="${escapeHtml(judge.linkedin_url)}" target="_blank" class="text-xs text-blue-600 hover:underline inline-flex items-center gap-1 mt-1">
                  <svg class="w-3 h-3" fill="currentColor" viewBox="0 0 24 24"><path d="M19 0h-14c-2.761 0-5 2.239-5 5v14c0 2.761 2.239 5 5 5h14c2.762 0 5-2.239 5-5v-14c0-2.761-2.238-5-5-5zm-11 19h-3v-11h3v11zm-1.5-12.268c-.966 0-1.75-.79-1.75-1.764s.784-1.764 1.75-1.764 1.75.79 1.75 1.764-.783 1.764-1.75 1.764zm13.5 12.268h-3v-5.604c0-3.368-4-3.113-4 0v5.604h-3v-11h3v1.765c1.396-2.586 7-2.777 7 2.476v6.759z"/></svg>
                  LinkedIn
                </a>` : ''}
                ${!judge.is_visible ? '<p class="text-xs text-orange-600 font-medium mt-1">Hidden from public</p>' : ''}
                <p class="text-xs text-gray-400 mt-1 font-mono">ID: ${judge.id}</p>
              </div>
              <span class="text-xs text-gray-400">Order: ${judge.sort_order || 0}</span>
            </div>
          </div>
        </div>
        ${judge.description ? `<div class="text-sm text-gray-600 mb-4">${nl2br(judge.description)}</div>` : ''}
        <div class="flex space-x-2 pt-4 border-t border-gray-100">
          <button
            onclick="editJudge('${judge.id}')"
            class="flex-1 px-3 py-2 text-sm text-blue-600 hover:bg-blue-50 rounded-lg transition-colors"
          >
            Edit
          </button>
          <button
            onclick="deleteJudge('${judge.id}', '${escapeHtml(judge.first_name)} ${escapeHtml(judge.last_name)}')"
            class="flex-1 px-3 py-2 text-sm text-red-600 hover:bg-red-50 rounded-lg transition-colors"
          >
            Delete
          </button>
        </div>
      </div>
    `).join('');
  }

  // Modal controls
  const modal = document.getElementById('judgeModal')!;
  const modalTitle = document.getElementById('judgeModalTitle')!;
  const form = document.getElementById('judgeModalForm') as HTMLFormElement;
  const modalError = document.getElementById('judgeModalError')!;

  function openModal(title: string) {
    modalTitle.textContent = title;
    modalError.classList.add('hidden');
    modal.classList.remove('hidden');
  }

  function closeModal() {
    modal.classList.add('hidden');
    form.reset();
    (document.getElementById('judgeId') as HTMLInputElement).value = '';
    selectedJudgeEvents = [];
    selectedJudgeTags = [];
    renderSelectedEvents();
    renderSelectedTags();
    updateEventSelector();
    updateTagSelector();
    
    // Clear media selector
    if (mediaSelectorId && (window as any)[`clearSelectedMedia_${mediaSelectorId}`]) {
      (window as any)[`clearSelectedMedia_${mediaSelectorId}`]();
    }
  }

  document.getElementById('addJudgeBtn')!.addEventListener('click', () => {
    selectedJudgeEvents = [];
    selectedJudgeTags = [];
    renderSelectedEvents();
    renderSelectedTags();
    updateEventSelector();
    updateTagSelector();
    
    // Clear media selector
    if (mediaSelectorId && (window as any)[`clearSelectedMedia_${mediaSelectorId}`]) {
      (window as any)[`clearSelectedMedia_${mediaSelectorId}`]();
    }
    
    openModal('Add Judge');
  });

  document.getElementById('judgeModalCloseBtn')!.addEventListener('click', closeModal);
  document.getElementById('judgeModalCancelBtn')!.addEventListener('click', closeModal);

  // Edit judge
  (window as any).editJudge = async (id: string) => {
    const judge = judges.find(j => j.id === id);
    if (!judge) return;

    (document.getElementById('judgeId') as HTMLInputElement).value = judge.id;
    (document.getElementById('first_name') as HTMLInputElement).value = judge.first_name;
    (document.getElementById('last_name') as HTMLInputElement).value = judge.last_name;
    (document.getElementById('job_title') as HTMLInputElement).value = judge.job_title || '';
    (document.getElementById('organization') as HTMLInputElement).value = judge.organization || '';
    (document.getElementById('linkedin_url') as HTMLInputElement).value = judge.linkedin_url || '';
    (document.getElementById('description') as HTMLTextAreaElement).value = judge.description || '';
    (document.getElementById('sort_order') as HTMLInputElement).value = judge.sort_order?.toString() || '0';
    (document.getElementById('is_visible') as HTMLInputElement).checked = judge.is_visible !== false;

    // Set selected events
    selectedJudgeEvents = judge.events || [];
    renderSelectedEvents();
    updateEventSelector();

    // Set selected tags
    selectedJudgeTags = judge.tags || [];
    renderSelectedTags();
    updateTagSelector();

    // Load media for this judge
    try {
      const response = await fetch(`/api/media?judgeIds=${id}`);
      const data = await response.json();
      if (response.ok && data.media && data.media.length > 0) {
        if (mediaSelectorId && (window as any)[`setSelectedMedia_${mediaSelectorId}`]) {
          (window as any)[`setSelectedMedia_${mediaSelectorId}`](data.media);
        }
      } else {
        if (mediaSelectorId && (window as any)[`clearSelectedMedia_${mediaSelectorId}`]) {
          (window as any)[`clearSelectedMedia_${mediaSelectorId}`]();
        }
      }
    } catch (error) {
      console.error('Error loading judge media:', error);
      if (mediaSelectorId && (window as any)[`clearSelectedMedia_${mediaSelectorId}`]) {
        (window as any)[`clearSelectedMedia_${mediaSelectorId}`]();
      }
    }

    openModal('Edit Judge');
  };

  // Delete judge
  (window as any).deleteJudge = async (id: string, name: string) => {
    if (!confirm(`Are you sure you want to delete "${name}"?`)) return;

    try {
      const response = await fetch('/api/judges', {
        method: 'DELETE',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ id }),
      });

      const data = await response.json();
      if (!response.ok) throw new Error(data.error);

      await loadJudges();
    } catch (error: any) {
      alert('Error deleting judge: ' + error.message);
    }
  };

  // Form submit
  form.addEventListener('submit', async (e) => {
    e.preventDefault();
    modalError.classList.add('hidden');

    const formData = new FormData(form);
    const id = formData.get('id') as string;

    // Get selected media from MediaSelector component
    const selectedMedia = mediaSelectorId && (window as any)[`getSelectedMedia_${mediaSelectorId}`]
      ? (window as any)[`getSelectedMedia_${mediaSelectorId}`]()
      : [];

    const data = {
      id: id || undefined,
      first_name: formData.get('first_name'),
      last_name: formData.get('last_name'),
      job_title: formData.get('job_title') || null,
      organization: formData.get('organization') || null,
      linkedin_url: formData.get('linkedin_url') || null,
      profile_image_url: selectedMedia.length > 0 ? selectedMedia[0].file_url : null,
      description: formData.get('description') || null,
      sort_order: formData.get('sort_order') ? parseInt(formData.get('sort_order') as string) : 0,
      is_visible: (document.getElementById('is_visible') as HTMLInputElement).checked,
      event_ids: selectedJudgeEvents.map(e => e.id),
      tag_ids: selectedJudgeTags.map(t => t.id),
      media_ids: selectedMedia.map((m: any) => m.id),
    };

    // Validate at least one event is selected
    if (data.event_ids.length === 0) {
      modalError.textContent = 'Please select at least one event for this judge';
      modalError.classList.remove('hidden');
      return;
    }

    try {
      const response = await fetch('/api/judges', {
        method: id ? 'PUT' : 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify(data),
      });

      const result = await response.json();
      if (!response.ok) throw new Error(result.error);

      closeModal();
      await loadJudges();
    } catch (error: any) {
      modalError.textContent = error.message;
      modalError.classList.remove('hidden');
    }
  });

  // Initial load
  Promise.all([loadEvents(), loadTags()]).then(loadJudges);
</script>

