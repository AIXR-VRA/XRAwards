---
/**
 * Admin Media Upload Page
 */
import AdminLayout from '../../components/admin/AdminLayout.astro';
import { createServerClient } from '@supabase/ssr';

// Check authentication
const supabase = createServerClient(
  import.meta.env.SUPABASE_URL,
  import.meta.env.SUPABASE_ANON_KEY,
  {
    cookies: {
      get(key: string) {
        return Astro.cookies.get(key)?.value;
      },
      set(key: string, value: string, options: any) {
        Astro.cookies.set(key, value, options);
      },
      remove(key: string, options: any) {
        Astro.cookies.delete(key, options);
      },
    },
  }
);

const { data: { session } } = await supabase.auth.getSession();

// Redirect if not authenticated
if (!session) {
  return Astro.redirect('/admin/login');
}
---

<AdminLayout title="Media Upload" activePage="upload" session={session}>
  <div class="space-y-8">
    <!-- Header -->
    <div>
      <h1 class="text-3xl font-bold text-gray-900">Media Upload</h1>
      <p class="mt-2 text-gray-600">Upload images to Cloudflare R2 storage</p>
    </div>

    <!-- Upload Form -->
    <div class="bg-white rounded-lg border border-gray-200 p-8">
      <form id="uploadForm" class="space-y-6">
        <!-- Folder Selection -->
        <div>
          <label for="folder" class="block text-sm font-medium text-gray-700 mb-1">
            Folder (Optional)
          </label>
          <select
            id="folder"
            name="folder"
            class="w-full px-4 py-2 border border-gray-300 rounded-lg focus:outline-hidden focus:ring-2 focus:ring-blue-500"
          >
            <option value="">Root</option>
            <option value="2024_Photos">2024_Photos</option>
            <option value="2025_Photos">2025_Photos</option>
            <option value="sponsors">sponsors</option>
            <option value="logos">logos</option>
            <option value="winners">winners</option>
            <option value="judges">judges</option>
            <option value="testimonials">testimonials</option>
          </select>
        </div>

        <!-- File Input -->
        <div>
          <label for="file" class="block text-sm font-medium text-gray-700 mb-1">
            Select Image
          </label>
          <div class="mt-1 flex justify-center px-6 pt-5 pb-6 border-2 border-gray-300 border-dashed rounded-lg hover:border-gray-400 transition-colors">
            <div class="space-y-1 text-center">
              <svg
                class="mx-auto h-12 w-12 text-gray-400"
                stroke="currentColor"
                fill="none"
                viewBox="0 0 48 48"
              >
                <path
                  d="M28 8H12a4 4 0 00-4 4v20m32-12v8m0 0v8a4 4 0 01-4 4H12a4 4 0 01-4-4v-4m32-4l-3.172-3.172a4 4 0 00-5.656 0L28 28M8 32l9.172-9.172a4 4 0 015.656 0L28 28m0 0l4 4m4-24h8m-4-4v8m-12 4h.02"
                  stroke-width="2"
                  stroke-linecap="round"
                  stroke-linejoin="round"
                />
              </svg>
              <div class="flex text-sm text-gray-600">
                <label
                  for="file"
                  class="relative cursor-pointer bg-white rounded-md font-medium text-blue-600 hover:text-blue-500 focus-within:outline-hidden"
                >
                  <span>Upload a file</span>
                  <input
                    id="file"
                    name="file"
                    type="file"
                    required
                    accept="image/*"
                    class="sr-only"
                  />
                </label>
                <p class="pl-1">or drag and drop</p>
              </div>
              <p class="text-xs text-gray-500">
                PNG, JPG, GIF, WebP up to 10MB
              </p>
            </div>
          </div>
          <div id="filePreview" class="mt-4 hidden">
            <img id="previewImage" class="max-w-full h-auto rounded-lg" alt="Preview" />
            <p id="fileName" class="mt-2 text-sm text-gray-600"></p>
          </div>
        </div>

        <!-- Upload Status -->
        <div id="uploadStatus" class="hidden">
          <div id="uploadError" class="hidden p-4 bg-red-50 border border-red-200 rounded-lg text-red-700 text-sm"></div>
          <div id="uploadSuccess" class="hidden p-4 bg-green-50 border border-green-200 rounded-lg">
            <p class="text-green-700 text-sm font-medium mb-2">Upload successful!</p>
            <div class="space-y-2">
              <p class="text-sm text-gray-700">
                <strong>URL:</strong>
                <a id="uploadedUrl" href="#" target="_blank" class="text-blue-600 hover:underline break-all"></a>
              </p>
              <p class="text-sm text-gray-700">
                <strong>Path:</strong>
                <code id="uploadedPath" class="bg-gray-100 px-2 py-1 rounded"></code>
              </p>
              <button
                type="button"
                id="copyUrlBtn"
                class="mt-2 text-sm text-blue-600 hover:text-blue-700"
              >
                Copy URL
              </button>
            </div>
          </div>
          <div id="uploadProgress" class="hidden">
            <div class="w-full bg-gray-200 rounded-full h-2">
              <div class="bg-blue-600 h-2 rounded-full transition-all duration-300" style="width: 0%" id="progressBar"></div>
            </div>
            <p class="mt-2 text-sm text-gray-600 text-center">Uploading...</p>
          </div>
        </div>

        <!-- Submit Button -->
        <button
          type="submit"
          id="uploadBtn"
          class="w-full bg-blue-600 text-white py-3 px-4 rounded-lg hover:bg-blue-700 transition-colors font-medium disabled:opacity-50 disabled:cursor-not-allowed"
        >
          Upload to R2
        </button>
      </form>
    </div>
  </div>
</AdminLayout>

<script>
  // File preview
  const fileInput = document.getElementById('file') as HTMLInputElement;
  fileInput.addEventListener('change', (e) => {
    const target = e.target as HTMLInputElement;
    const file = target.files?.[0];
    if (file) {
      const preview = document.getElementById('filePreview')!;
      const previewImage = document.getElementById('previewImage') as HTMLImageElement;
      const fileName = document.getElementById('fileName')!;

      previewImage.src = URL.createObjectURL(file);
      fileName.textContent = `${file.name} (${(file.size / 1024 / 1024).toFixed(2)} MB)`;
      preview.classList.remove('hidden');
    }
  });

  // Upload form handler
  const uploadForm = document.getElementById('uploadForm') as HTMLFormElement;
  uploadForm.addEventListener('submit', async (e) => {
    e.preventDefault();
    
    const uploadBtn = document.getElementById('uploadBtn') as HTMLButtonElement;
    const uploadStatus = document.getElementById('uploadStatus')!;
    const uploadError = document.getElementById('uploadError')!;
    const uploadSuccess = document.getElementById('uploadSuccess')!;
    const uploadProgress = document.getElementById('uploadProgress')!;
    
    // Reset status
    uploadStatus.classList.remove('hidden');
    uploadError.classList.add('hidden');
    uploadSuccess.classList.add('hidden');
    uploadProgress.classList.remove('hidden');
    uploadBtn.disabled = true;

    try {
      const formData = new FormData(uploadForm);
      
      const response = await fetch('/api/upload', {
        method: 'POST',
        body: formData,
      });

      const result = await response.json();

      if (!response.ok) {
        throw new Error(result.error || 'Upload failed');
      }

      // Show success
      uploadProgress.classList.add('hidden');
      uploadSuccess.classList.remove('hidden');
      
      const uploadedUrl = document.getElementById('uploadedUrl') as HTMLAnchorElement;
      const uploadedPath = document.getElementById('uploadedPath')!;
      uploadedUrl.href = result.url;
      uploadedUrl.textContent = result.url;
      uploadedPath.textContent = result.path;

      // Reset form
      uploadForm.reset();
      document.getElementById('filePreview')!.classList.add('hidden');

    } catch (error: any) {
      uploadProgress.classList.add('hidden');
      uploadError.textContent = error.message || 'Upload failed';
      uploadError.classList.remove('hidden');
    } finally {
      uploadBtn.disabled = false;
    }
  });

  // Copy URL button
  const copyUrlBtn = document.getElementById('copyUrlBtn');
  copyUrlBtn?.addEventListener('click', () => {
    const url = (document.getElementById('uploadedUrl') as HTMLAnchorElement).href;
    navigator.clipboard.writeText(url);
    copyUrlBtn.textContent = 'Copied!';
    setTimeout(() => {
      copyUrlBtn.textContent = 'Copy URL';
    }, 2000);
  });
</script>
