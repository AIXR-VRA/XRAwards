---
/**
 * Admin Tags Management Page
 */
import AdminLayout from '../../components/admin/AdminLayout.astro';
import { createServerClient } from '@supabase/ssr';

// Check authentication
const supabase = createServerClient(
  import.meta.env.SUPABASE_URL,
  import.meta.env.SUPABASE_ANON_KEY,
  {
    cookies: {
      get(key: string) {
        return Astro.cookies.get(key)?.value;
      },
      set(key: string, value: string, options: any) {
        Astro.cookies.set(key, value, options);
      },
      remove(key: string, options: any) {
        Astro.cookies.delete(key, options);
      },
    },
  }
);

const { data: { session } } = await supabase.auth.getSession();

// Redirect if not authenticated
if (!session) {
  return Astro.redirect('/admin/login');
}
---

<AdminLayout title="Tags" activePage="tags" session={session}>
  <div class="space-y-8">
    <!-- Header -->
    <div class="flex items-center justify-between">
      <div>
        <h1 class="text-3xl font-bold text-gray-900">Tags</h1>
        <p class="mt-2 text-gray-600">Manage reusable tags for categories and finalists</p>
      </div>
      <button
        id="addTagBtn"
        class="px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 transition-colors font-medium"
      >
        + Add Tag
      </button>
    </div>

    <!-- Tags List -->
    <div id="tagsList" class="bg-white border border-gray-200 rounded-lg overflow-hidden">
      <!-- Loading state -->
      <div class="p-12 text-center">
        <p class="text-gray-500">Loading tags...</p>
      </div>
    </div>

    <!-- Add/Edit Modal -->
    <div id="tagModal" class="hidden fixed inset-0 bg-black/50 items-center justify-center z-50 p-4">
      <div class="bg-white rounded-lg max-w-md w-full p-6">
        <div class="flex items-center justify-between mb-6">
          <h2 id="modalTitle" class="text-xl font-semibold text-gray-900">Add Tag</h2>
          <button id="closeModalBtn" class="text-gray-400 hover:text-gray-600">
            <svg class="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12" />
            </svg>
          </button>
        </div>

        <form id="tagForm" class="space-y-4">
          <input type="hidden" id="tagId" name="id" />
          
          <div>
            <label for="name" class="block text-sm font-medium text-gray-700 mb-1">
              Name *
            </label>
            <input
              type="text"
              id="name"
              name="name"
              required
              class="w-full px-4 py-2 border border-gray-300 rounded-lg focus:outline-hidden focus:ring-2 focus:ring-blue-500"
              placeholder="e.g., VR, 2024, Gaming"
            />
            <p class="text-xs text-gray-500 mt-1">Slug will be auto-generated</p>
          </div>

          <div>
            <label for="description" class="block text-sm font-medium text-gray-700 mb-1">
              Description
            </label>
            <textarea
              id="description"
              name="description"
              rows="3"
              class="w-full px-4 py-2 border border-gray-300 rounded-lg focus:outline-hidden focus:ring-2 focus:ring-blue-500"
              placeholder="Optional description..."
            ></textarea>
          </div>

          <div id="modalError" class="hidden text-red-600 text-sm"></div>

          <div class="flex space-x-3 pt-4">
            <button
              type="submit"
              class="flex-1 bg-blue-600 text-white py-2 px-4 rounded-lg hover:bg-blue-700 transition-colors font-medium"
            >
              Save
            </button>
            <button
              type="button"
              id="cancelBtn"
              class="flex-1 bg-gray-200 text-gray-700 py-2 px-4 rounded-lg hover:bg-gray-300 transition-colors font-medium"
            >
              Cancel
            </button>
          </div>
        </form>
      </div>
    </div>
  </div>
</AdminLayout>

<script>
  let tags: any[] = [];

  // Load tags
  async function loadTags() {
    try {
      const response = await fetch('/api/tags');
      const data = await response.json();
      
      if (!response.ok) throw new Error(data.error);
      
      tags = data.tags || [];
      renderTags();
    } catch (error: any) {
      const list = document.getElementById('tagsList')!;
      list.innerHTML = `
        <div class="p-12 text-center">
          <p class="text-red-600">Error loading tags: ${error.message}</p>
        </div>
      `;
    }
  }

  // Render tags
  function renderTags() {
    const list = document.getElementById('tagsList')!;
    
    if (tags.length === 0) {
      list.innerHTML = `
        <div class="p-12 text-center">
          <p class="text-gray-500">No tags yet. Add your first tag!</p>
        </div>
      `;
      return;
    }

    list.innerHTML = `
      <table class="min-w-full divide-y divide-gray-200">
        <thead class="bg-gray-50">
          <tr>
            <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Name</th>
            <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Slug</th>
            <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">ID</th>
            <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Description</th>
            <th class="px-6 py-3 text-right text-xs font-medium text-gray-500 uppercase tracking-wider">Actions</th>
          </tr>
        </thead>
        <tbody class="bg-white divide-y divide-gray-200">
          ${tags.map(tag => `
            <tr class="hover:bg-gray-50">
              <td class="px-6 py-4 whitespace-nowrap">
                <span class="inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium bg-blue-100 text-blue-800">
                  ${tag.name}
                </span>
              </td>
              <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-500">
                ${tag.slug}
              </td>
              <td class="px-6 py-4 whitespace-nowrap text-xs text-gray-400 font-mono">
                ${tag.id}
              </td>
              <td class="px-6 py-4 text-sm text-gray-600">
                ${tag.description || '<span class="text-gray-400 italic">No description</span>'}
              </td>
              <td class="px-6 py-4 whitespace-nowrap text-right text-sm font-medium">
                <button
                  onclick="editTag('${tag.id}')"
                  class="text-blue-600 hover:text-blue-900 mr-3"
                >
                  Edit
                </button>
                <button
                  onclick="deleteTag('${tag.id}', '${tag.name}')"
                  class="text-red-600 hover:text-red-900"
                >
                  Delete
                </button>
              </td>
            </tr>
          `).join('')}
        </tbody>
      </table>
    `;
  }

  // Modal controls
  const modal = document.getElementById('tagModal')!;
  const modalTitle = document.getElementById('modalTitle')!;
  const form = document.getElementById('tagForm') as HTMLFormElement;
  const modalError = document.getElementById('modalError')!;

  function openModal(title: string) {
    modalTitle.textContent = title;
    modalError.classList.add('hidden');
    modal.classList.remove('hidden');
    modal.classList.add('flex');
  }

  function closeModal() {
    modal.classList.add('hidden');
    modal.classList.remove('flex');
    form.reset();
    (document.getElementById('tagId') as HTMLInputElement).value = '';
  }

  document.getElementById('addTagBtn')!.addEventListener('click', () => {
    openModal('Add Tag');
  });

  document.getElementById('closeModalBtn')!.addEventListener('click', closeModal);
  document.getElementById('cancelBtn')!.addEventListener('click', closeModal);

  // Edit tag
  (window as any).editTag = (id: string) => {
    const tag = tags.find(t => t.id === id);
    if (!tag) return;

    (document.getElementById('tagId') as HTMLInputElement).value = tag.id;
    (document.getElementById('name') as HTMLInputElement).value = tag.name;
    (document.getElementById('description') as HTMLTextAreaElement).value = tag.description || '';

    openModal('Edit Tag');
  };

  // Delete tag
  (window as any).deleteTag = async (id: string, name: string) => {
    if (!confirm(`Are you sure you want to delete "${name}"? This will remove it from all categories and finalists.`)) return;

    try {
      const response = await fetch('/api/tags', {
        method: 'DELETE',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ id }),
      });

      const data = await response.json();
      if (!response.ok) throw new Error(data.error);

      await loadTags();
    } catch (error: any) {
      alert('Error deleting tag: ' + error.message);
    }
  };

  // Form submit
  form.addEventListener('submit', async (e) => {
    e.preventDefault();
    modalError.classList.add('hidden');

    const formData = new FormData(form);
    const id = formData.get('id') as string;
    const data = {
      id: id || undefined,
      name: formData.get('name'),
      description: formData.get('description') || null,
    };

    try {
      const response = await fetch('/api/tags', {
        method: id ? 'PUT' : 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify(data),
      });

      const result = await response.json();
      if (!response.ok) throw new Error(result.error);

      closeModal();
      await loadTags();
    } catch (error: any) {
      modalError.textContent = error.message;
      modalError.classList.remove('hidden');
    }
  });

  // Initial load
  loadTags();
</script>
</AdminLayout>

