---
/**
 * Finalist Share Tool
 * URL: /finalist-share
 * Public tool for creating shareable finalist images with frame overlay
 */
import Layout from '../layouts/Layout.astro';
import Header from '../components/Header.astro';
import Footer from '../components/Footer.astro';
import CTAFooter from '../components/CTAFooter.astro';
import { createClient } from '@supabase/supabase-js';
import { getR2ImageUrl } from '../utils/r2';

export const prerender = true;

const supabase = createClient(
  import.meta.env.PUBLIC_SUPABASE_URL,
  import.meta.env.PUBLIC_SUPABASE_ANON_KEY
);

// Get the active event
const { data: activeEvent } = await supabase
  .from('event_details')
  .select('*')
  .eq('is_active', true)
  .single();

// Get finalists for the active event
const { data: finalists } = await supabase
  .from('finalists')
  .select(`
    *,
    categories (
      id,
      name,
      slug
    )
  `)
  .eq('event_id', activeEvent?.id)
  .order('title');

// Get categories for the active event
const { data: categories } = await supabase
  .from('category_events')
  .select(`
    category_id,
    categories (
      id,
      name,
      slug
    )
  `)
  .eq('event_id', activeEvent?.id);

const categoryList = categories?.map(ce => ce.categories).filter(Boolean) || [];

// Frame image URL
const frameImageUrl = getR2ImageUrl('images/2025/10/xr_awards_gala_2025_finalist_frame_2024_1760450572001.png');
---

<Layout
  title="Finalist Share Tool - AIXR XR Awards"
  description="Create shareable finalist images with the official XR Awards frame overlay"
>
  <Header />

  <main class="min-h-screen bg-white">
    <!-- Page Header -->
    <section class="relative bg-[#0E1022] pt-32 md:pt-40 pb-20 md:pb-32 overflow-hidden">
      <!-- Decorative Background Rings -->
      <div class="absolute -left-20 md:left-0 top-1/4 -translate-y-1/2 -translate-x-1/2 w-[300px] h-[300px] md:w-[450px] md:h-[450px]">
        <div class="absolute inset-0 rounded-full" style="background: linear-gradient(180deg, #E91E8C 0%, #5D1635 100%);"></div>
        <div class="absolute top-[55px] left-[55px] right-[55px] bottom-[55px] md:top-[75px] md:left-[75px] md:right-[75px] md:bottom-[75px] rounded-full bg-[#0E1022]"></div>
      </div>
      <div class="absolute -right-20 md:right-0 top-3/4 -translate-y-1/2 translate-x-1/2 w-[300px] h-[300px] md:w-[450px] md:h-[450px]">
        <div class="absolute inset-0 rounded-full" style="background: linear-gradient(180deg, #00D4D8 0%, #0A4B52 100%);"></div>
        <div class="absolute top-[55px] left-[55px] right-[55px] bottom-[55px] md:top-[75px] md:left-[75px] md:right-[75px] md:bottom-[75px] rounded-full bg-[#0E1022]"></div>
      </div>

      <!-- Content -->
      <div class="relative z-10 max-w-6xl mx-auto px-4 sm:px-6 lg:px-8 text-center">
        <h1 class="page-title text-white mb-6">
          Finalist Share Tool
        </h1>

        <!-- Decorative Dots -->
        <div class="flex justify-center gap-2 mb-6">
          <span class="w-1.5 h-1.5 rounded-full bg-cyan-400"></span>
          <span class="w-1.5 h-1.5 rounded-full bg-cyan-400"></span>
          <span class="w-1.5 h-1.5 rounded-full bg-cyan-400"></span>
          <span class="w-1.5 h-1.5 rounded-full bg-cyan-400"></span>
          <span class="w-1.5 h-1.5 rounded-full bg-cyan-400"></span>
        </div>

        <p class="page-subtitle text-gray-300">
          Create shareable finalist images with the official XR Awards frame
        </p>
      </div>
    </section>

    <!-- Main Content -->
    <section class="py-16 bg-white">
      <div class="max-w-6xl mx-auto px-4 sm:px-6 lg:px-8">
        <div class="grid grid-cols-1 lg:grid-cols-2 gap-12">
          <!-- Left Column - Search & Selection -->
          <div class="space-y-8">
            <div>
              <h2 class="text-2xl font-bold text-gray-900 mb-6">Find Your Finalist</h2>
              
              <!-- Search Input -->
              <div class="mb-6">
                <label for="searchInput" class="block text-sm font-medium text-gray-700 mb-2">
                  Search Finalists
                </label>
                <input
                  type="text"
                  id="searchInput"
                  placeholder="Search by title, organization, or category..."
                  class="w-full px-4 py-3 border border-gray-300 rounded-lg focus:outline-hidden focus:ring-2 focus:ring-[#4923EB] focus:border-transparent"
                />
              </div>

              <!-- Category Filter -->
              <div class="mb-6">
                <label for="categoryFilter" class="block text-sm font-medium text-gray-700 mb-2">
                  Filter by Category
                </label>
                <select
                  id="categoryFilter"
                  class="w-full px-4 py-3 border border-gray-300 rounded-lg focus:outline-hidden focus:ring-2 focus:ring-[#4923EB] focus:border-transparent"
                >
                  <option value="">All Categories</option>
                  {categoryList.map(category => (
                    <option value={category.id}>{category.name}</option>
                  ))}
                </select>
              </div>

              <!-- Finalists List -->
              <div class="space-y-4 max-h-96 overflow-y-auto">
                <div id="finalistsList">
                  {finalists?.map(finalist => (
                    <div 
                      class="finalist-item p-4 border border-gray-200 rounded-lg cursor-pointer hover:bg-gray-50 transition-colors"
                      data-finalist-id={finalist.id}
                      data-title={finalist.title}
                      data-organization={finalist.organization || ''}
                      data-category={finalist.categories?.name || ''}
                      data-category-id={finalist.categories?.id || ''}
                      data-image-url={finalist.image_url}
                    >
                      <div class="flex items-center gap-4">
                        {finalist.image_url ? (
                          <img 
                            src={finalist.image_url} 
                            alt={finalist.title}
                            class="w-16 h-16 object-cover rounded-lg"
                          />
                        ) : (
                          <div class="w-16 h-16 bg-gray-100 rounded-lg flex items-center justify-center">
                            <svg class="w-8 h-8 text-gray-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="1.5" d="M4 16l4.586-4.586a2 2 0 012.828 0L16 16m-2-2l1.586-1.586a2 2 0 012.828 0L20 14m-6-6h.01M6 20h12a2 2 0 002-2V6a2 2 0 00-2-2H6a2 2 0 00-2 2v12a2 2 0 002 2z" />
                            </svg>
                          </div>
                        )}
                        <div class="flex-1">
                          <h3 class="font-semibold text-gray-900">{finalist.title}</h3>
                          {finalist.organization && (
                            <p class="text-sm text-gray-600">{finalist.organization}</p>
                          )}
                          <p class="text-sm text-[#4923EB]">{finalist.categories?.name}</p>
                        </div>
                      </div>
                    </div>
                  ))}
                </div>
              </div>
            </div>

            <!-- Custom Image Upload -->
            <div class="border-t pt-8">
              <h3 class="text-lg font-semibold text-gray-900 mb-4">Or Use Your Own Image</h3>
              <div class="space-y-4">
                <div>
                  <label for="customImage" class="block text-sm font-medium text-gray-700 mb-2">
                    Upload Custom Image
                  </label>
                  <input
                    type="file"
                    id="customImage"
                    accept="image/*"
                    class="w-full px-4 py-3 border border-gray-300 rounded-lg focus:outline-hidden focus:ring-2 focus:ring-[#4923EB] focus:border-transparent"
                  />
                </div>
                <div class="text-sm text-gray-500">
                  <p>Supported formats: JPG, PNG, WebP</p>
                  <p>Recommended size: 800x800px or larger</p>
                </div>
              </div>
            </div>
          </div>

          <!-- Right Column - Preview & Download -->
          <div class="space-y-8">
            <div>
              <h2 class="text-2xl font-bold text-gray-900 mb-6">Preview</h2>
              
              <!-- Preview Container -->
              <div class="bg-gray-100 rounded-lg p-8 text-center">
                <div id="previewContainer" class="relative inline-block">
                  <div id="previewImage" class="w-80 h-80 bg-gray-200 rounded-lg flex items-center justify-center">
                    <div class="text-center text-gray-500">
                      <svg class="w-16 h-16 mx-auto mb-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="1.5" d="M4 16l4.586-4.586a2 2 0 012.828 0L16 16m-2-2l1.586-1.586a2 2 0 012.828 0L20 14m-6-6h.01M6 20h12a2 2 0 002-2V6a2 2 0 00-2-2H6a2 2 0 00-2 2v12a2 2 0 002 2z" />
                      </svg>
                      <p class="text-sm">Select a finalist or upload an image</p>
                    </div>
                  </div>
                </div>
              </div>

              <!-- Download Button -->
              <div class="mt-6">
                <button
                  id="downloadBtn"
                  disabled
                  class="w-full px-6 py-3 bg-[#4923EB] text-white rounded-lg font-medium hover:bg-[#3A1BB8] disabled:bg-gray-300 disabled:cursor-not-allowed transition-colors"
                >
                  Download Image
                </button>
              </div>
            </div>

            <!-- Instructions -->
            <div class="bg-blue-50 border border-blue-200 rounded-lg p-6">
              <h3 class="text-lg font-semibold text-blue-900 mb-3">How to Use</h3>
              <ol class="text-sm text-blue-800 space-y-2">
                <li>1. Search and select a finalist from the list, or upload your own image</li>
                <li>2. The preview will show your image with the official XR Awards frame</li>
                <li>3. Click "Download Image" to save your shareable finalist image</li>
                <li>4. Share on social media to celebrate your achievement!</li>
              </ol>
            </div>
          </div>
        </div>
      </div>
    </section>

    <!-- CTA Section -->
    <CTAFooter />
  </main>

  <Footer />
</Layout>

<style>
  .page-title {
    font-size: 35px;
    font-weight: 600;
  }

  .page-subtitle {
    font-size: 16px;
    font-weight: 300;
    font-family: "IBM Plex Mono", monospace;
  }

  .finalist-item.selected {
    background-color: #f3f4f6;
    border-color: #4923EB;
    box-shadow: 0 0 0 2px rgba(73, 35, 235, 0.2);
  }
</style>

<script>
  // Frame image URL
  const frameImageUrl = '{frameImageUrl}';
  
  let selectedFinalist = null;
  let customImage = null;
  let canvas = null;
  let ctx = null;

  // Initialize canvas
  function initCanvas() {
    canvas = document.createElement('canvas');
    canvas.width = 800;
    canvas.height = 800;
    ctx = canvas.getContext('2d');
  }

  // Load and draw frame
  function loadFrame() {
    return new Promise((resolve, reject) => {
      const frameImg = new Image();
      frameImg.crossOrigin = 'anonymous';
      frameImg.onload = () => {
        ctx.drawImage(frameImg, 0, 0, 800, 800);
        resolve();
      };
      frameImg.onerror = reject;
      frameImg.src = frameImageUrl;
    });
  }

  // Load and draw finalist image
  function loadFinalistImage(imageUrl) {
    return new Promise((resolve, reject) => {
      const finalistImg = new Image();
      finalistImg.crossOrigin = 'anonymous';
      finalistImg.onload = () => {
        // Calculate dimensions to fit within the frame (adjust as needed)
        const maxWidth = 600;
        const maxHeight = 600;
        const x = 100; // Center horizontally
        const y = 100; // Center vertically
        
        let { width, height } = finalistImg;
        
        // Scale to fit within bounds
        if (width > maxWidth || height > maxHeight) {
          const scale = Math.min(maxWidth / width, maxHeight / height);
          width *= scale;
          height *= scale;
        }
        
        const centerX = x + (maxWidth - width) / 2;
        const centerY = y + (maxHeight - height) / 2;
        
        ctx.drawImage(finalistImg, centerX, centerY, width, height);
        resolve();
      };
      finalistImg.onerror = reject;
      finalistImg.src = imageUrl;
    });
  }

  // Update preview
  async function updatePreview() {
    const previewContainer = document.getElementById('previewContainer');
    const downloadBtn = document.getElementById('downloadBtn');
    
    if (!selectedFinalist && !customImage) {
      previewContainer.innerHTML = `
        <div class="w-80 h-80 bg-gray-200 rounded-lg flex items-center justify-center">
          <div class="text-center text-gray-500">
            <svg class="w-16 h-16 mx-auto mb-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="1.5" d="M4 16l4.586-4.586a2 2 0 012.828 0L16 16m-2-2l1.586-1.586a2 2 0 012.828 0L20 14m-6-6h.01M6 20h12a2 2 0 002-2V6a2 2 0 00-2-2H6a2 2 0 00-2 2v12a2 2 0 002 2z" />
            </svg>
            <p class="text-sm">Select a finalist or upload an image</p>
          </div>
        </div>
      `;
      downloadBtn.disabled = true;
      return;
    }

    try {
      // Initialize canvas if not done
      if (!canvas) {
        initCanvas();
      }

      // Clear canvas
      ctx.clearRect(0, 0, 800, 800);

      // Load frame first
      await loadFrame();

      // Load finalist image
      const imageUrl = selectedFinalist?.image_url || customImage;
      if (imageUrl) {
        await loadFinalistImage(imageUrl);
      }

      // Update preview
      const dataUrl = canvas.toDataURL('image/png');
      previewContainer.innerHTML = `
        <img src="${dataUrl}" alt="Preview" class="w-80 h-80 object-cover rounded-lg shadow-lg" />
      `;

      downloadBtn.disabled = false;
    } catch (error) {
      console.error('Error updating preview:', error);
      previewContainer.innerHTML = `
        <div class="w-80 h-80 bg-red-100 rounded-lg flex items-center justify-center">
          <div class="text-center text-red-500">
            <svg class="w-16 h-16 mx-auto mb-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 8v4m0 4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z" />
            </svg>
            <p class="text-sm">Error loading image</p>
          </div>
        </div>
      `;
      downloadBtn.disabled = true;
    }
  }

  // Search functionality
  function filterFinalists() {
    const searchTerm = document.getElementById('searchInput').value.toLowerCase();
    const categoryFilter = document.getElementById('categoryFilter').value;
    const finalistItems = document.querySelectorAll('.finalist-item');

    finalistItems.forEach(item => {
      const title = item.dataset.title.toLowerCase();
      const organization = (item.dataset.organization || '').toLowerCase();
      const category = item.dataset.category.toLowerCase();
      const categoryId = item.dataset.categoryId;
      
      const matchesSearch = !searchTerm || 
        title.includes(searchTerm) || 
        organization.includes(searchTerm) || 
        category.includes(searchTerm);
      
      const matchesCategory = !categoryFilter || categoryId === categoryFilter;
      
      if (matchesSearch && matchesCategory) {
        item.style.display = 'block';
      } else {
        item.style.display = 'none';
      }
    });
  }

  // Event listeners
  document.addEventListener('DOMContentLoaded', () => {
    // Search input
    document.getElementById('searchInput').addEventListener('input', filterFinalists);
    
    // Category filter
    document.getElementById('categoryFilter').addEventListener('change', filterFinalists);
    
    // Finalist selection
    document.querySelectorAll('.finalist-item').forEach(item => {
      item.addEventListener('click', () => {
        // Remove previous selection
        document.querySelectorAll('.finalist-item').forEach(i => i.classList.remove('selected'));
        
        // Add selection to clicked item
        item.classList.add('selected');
        
        // Set selected finalist
        selectedFinalist = {
          id: item.dataset.finalistId,
          title: item.dataset.title,
          organization: item.dataset.organization,
          category: item.dataset.category,
          image_url: item.dataset.imageUrl
        };
        
        // Clear custom image
        customImage = null;
        document.getElementById('customImage').value = '';
        
        updatePreview();
      });
    });
    
    // Custom image upload
    document.getElementById('customImage').addEventListener('change', (e) => {
      const file = e.target.files[0];
      if (file) {
        const reader = new FileReader();
        reader.onload = (e) => {
          customImage = e.target.result;
          selectedFinalist = null;
          
          // Remove selection from finalist items
          document.querySelectorAll('.finalist-item').forEach(i => i.classList.remove('selected'));
          
          updatePreview();
        };
        reader.readAsDataURL(file);
      }
    });
    
    // Download button
    document.getElementById('downloadBtn').addEventListener('click', () => {
      if (canvas) {
        const link = document.createElement('a');
        link.download = `xr-awards-finalist-${Date.now()}.png`;
        link.href = canvas.toDataURL('image/png');
        link.click();
      }
    });
  });
</script>
