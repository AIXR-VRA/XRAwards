---
/**
 * Reusable Button component with multiple variants
 * Usage: <Button variant="primary" href="/contact">Click me</Button>
 */

export interface Props {
  variant?: 'primary' | 'secondary' | 'outline' | 'ghost' | 'orange' | 'orange-alt';
  size?: 'sm' | 'md' | 'lg';
  href?: string;
  type?: 'button' | 'submit' | 'reset';
  disabled?: boolean;
  fullWidth?: boolean;
  class?: string;
}

const {
  variant = 'primary',
  size = 'md',
  href,
  type = 'button',
  disabled = false,
  fullWidth = false,
  class: className = '',
} = Astro.props;

const baseStyles = 'btn inline-flex items-center justify-center font-medium rounded-sm transition-colors focus:outline-none focus:ring-2 focus:ring-offset-2 disabled:opacity-50 disabled:cursor-not-allowed no-underline';

const variants = {
  primary: 'bg-white text-zinc-900 hover:bg-zinc-100 focus:ring-white',
  secondary: 'bg-zinc-800 text-white hover:bg-zinc-700 focus:ring-zinc-800',
  outline: 'border-2 border-zinc-700 text-white hover:bg-zinc-800 focus:ring-zinc-700',
  ghost: 'text-zinc-300 hover:text-white hover:bg-zinc-800 focus:ring-zinc-700',
  orange: 'bg-[#FB7430] text-white hover:bg-[#E5691C] focus:ring-[#FB7430]',
  'orange-alt': 'bg-[#F37137] text-white hover:bg-[#E55A2B] focus:ring-[#F37137]',
};

const sizes = {
  sm: 'px-4 py-2 text-sm',
  md: 'px-6 py-3 text-base',
  lg: 'px-8 py-4 text-lg',
};

const classes = `${baseStyles} ${variants[variant]} ${sizes[size]} ${fullWidth ? 'w-full' : ''} ${className}`;

const Element = href ? 'a' : 'button';
---

<Element
  href={href}
  type={!href ? type : undefined}
  disabled={!href ? disabled : undefined}
  class={classes}
>
  <slot />
</Element>
