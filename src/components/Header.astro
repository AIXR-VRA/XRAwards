---
// Header component with navigation - transparent until scroll
import { getRecentEventYears, isAfterCeremonyDate } from '../utils/supabase';
import { getCTAButton } from '../utils/date-checker';
import { createClient } from '@supabase/supabase-js';

// Get recent years for dynamic navigation
const recentYears = await getRecentEventYears();
const [currentYear, previousYear, thirdYear] = recentYears;

// Get dynamic CTA button based on event phase
const ctaButton = await getCTAButton('header');

// Get event slugs for ceremony links
import { supabase } from '../utils/supabase';

const { data: events } = await supabase
  .from('event_details')
  .select('event_year, slug')
  .in('event_year', recentYears)
  .order('event_year', { ascending: false });

// Create mapping of year to slug
const yearToSlug = events?.reduce((acc: any, event: any) => {
  acc[event.event_year] = event.slug;
  return acc;
}, {}) || {};

// Check if years are after ceremony date
const isPreviousAfterCeremony = await isAfterCeremonyDate(previousYear);
const isThirdAfterCeremony = await isAfterCeremonyDate(thirdYear);

// Build dynamic navigation
const navigation = [
  { name: 'Judges', href: '/judges' },
  { 
    name: 'Ceremonies', 
    isDropdown: true,
    items: [
      { name: `${currentYear} Ceremony`, href: `/${yearToSlug[currentYear] || `xr-awards-${currentYear}`}` },
      ...(previousYear ? [{ name: `${previousYear} Ceremony`, href: `/${yearToSlug[previousYear] || `xr-awards-${previousYear}`}` }] : []),
      ...(thirdYear ? [{ name: `${thirdYear} Ceremony`, href: `/${yearToSlug[thirdYear] || `xr-awards-${thirdYear}`}` }] : []),
      { name: 'Ceremony Archive', href: '/archive' }
    ]
  },
  { 
    name: 'Finalists', 
    isDropdown: true,
    items: [
      { name: `${currentYear} Finalists`, href: `/winners-and-finalists-${currentYear}` },
      ...(previousYear ? [{ 
        name: `${previousYear} ${isPreviousAfterCeremony ? 'Winners & ' : ''}Finalists`, 
        href: `/winners-and-finalists-${previousYear}` 
      }] : []),
      ...(thirdYear ? [{ 
        name: `${thirdYear} ${isThirdAfterCeremony ? 'Winners & ' : ''}Finalists`, 
        href: `/winners-and-finalists-${thirdYear}` 
      }] : []),
      { name: 'Finalist Archive', href: '/archive' }
    ]
  },
  { name: 'Categories', href: '/categories' },
];

const moreItems = [
  { name: 'Travel & Accommodation', href: '/travel-accommodation' },
  { name: 'Frequently Asked Questions', href: '/legal/faq' },
  { name: 'About & History', href: '/about-xr-awards' },
  { name: 'Sponsors & Partners', href: '/sponsors-and-partners' },
];
---

<header class="fixed top-0 left-0 right-0 z-50">
  <nav class="max-w-6xl mx-auto px-4 sm:px-6 lg:px-8 pt-4" aria-label="Main navigation">
    <div id="nav-container" class="flex items-center justify-between h-16 px-6 rounded-2xl border border-white/20 transition-all duration-300">
      <!-- Logo -->
      <div class="shrink-0">
        <a href="/" class="flex items-center" aria-label="XR Awards - Home">
          <img
            id="header-logo"
            src="/XRA-Logo.svg"
            alt="XR Awards"
            class="h-8 w-auto"
          />
        </a>
      </div>

      <!-- Desktop Navigation -->
      <div class="hidden md:flex items-center space-x-8">
        {navigation.map((item) => (
          item.isDropdown ? (
            <div class="relative group">
              <button 
                class="nav-link flex items-center text-white hover:text-primary transition-colors text-sm font-medium py-2" 
                style="font-family: var(--font-heading);"
                aria-haspopup="true"
                aria-expanded="false"
              >
                {item.name}
                <svg class="ml-1 h-4 w-4" fill="none" stroke="currentColor" viewBox="0 0 24 24" aria-hidden="true">
                  <title>Dropdown arrow</title>
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 9l-7 7-7-7" />
                </svg>
              </button>
              
              <!-- Dropdown Menu -->
              <div class="absolute left-0 mt-2 w-48 bg-white rounded-lg shadow-xl border border-gray-200 opacity-0 invisible group-hover:opacity-100 group-hover:visible transition-all duration-200 z-50" role="menu" aria-label={`${item.name} submenu`}>
                <div class="py-2">
                  {item.items.map((subItem) => (
                    <a
                      href={subItem.href}
                      class="dropdown-link block px-4 py-2 text-sm text-dark hover:bg-gray-50 transition-colors"
                      style="font-family: var(--font-heading);"
                      role="menuitem"
                    >
                      {subItem.name}
                    </a>
                  ))}
                </div>
              </div>
            </div>
          ) : (
            <a
              href={item.href}
              class="nav-link text-white hover:text-primary transition-colors text-sm font-medium py-2"
              style="font-family: var(--font-heading);"
            >
              {item.name}
            </a>
          )
        ))}
        
        <!-- More Dropdown -->
        <div class="relative group">
          <button 
            class="nav-link flex items-center text-white hover:text-primary transition-colors text-sm font-medium py-2" 
            style="font-family: var(--font-heading);"
            aria-haspopup="true"
            aria-expanded="false"
          >
            More
            <svg class="ml-1 h-4 w-4" fill="none" stroke="currentColor" viewBox="0 0 24 24" aria-hidden="true">
              <title>Dropdown arrow</title>
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 9l-7 7-7-7" />
            </svg>
          </button>
          
          <!-- Dropdown Menu -->
          <div class="absolute right-0 mt-2 w-48 bg-white rounded-lg shadow-xl border border-gray-200 opacity-0 invisible group-hover:opacity-100 group-hover:visible transition-all duration-200 z-50" role="menu" aria-label="Additional navigation">
            <div class="py-2">
              {moreItems.map((item) => (
                <a
                  href={item.href}
                  class="dropdown-link block px-4 py-2 text-sm text-dark hover:bg-gray-50 transition-colors"
                  style="font-family: var(--font-heading);"
                  role="menuitem"
                >
                  {item.name}
                </a>
              ))}
            </div>
          </div>
        </div>
      </div>

      <!-- CTA Button -->
      <div class="hidden md:block">
        <a
          href={ctaButton.href}
          class={`inline-flex items-center px-4 py-2 text-sm font-medium rounded-lg transition-colors ${
            ctaButton.variant === 'primary' 
              ? 'bg-primary text-white hover:bg-primary-dark' 
              : ctaButton.variant === 'secondary'
              ? 'bg-gray-100 text-gray-900 hover:bg-gray-200'
              : 'border border-gray-300 text-gray-700 hover:bg-gray-50'
          }`}
        >
          {ctaButton.text}
        </a>
      </div>

      <!-- Mobile menu button -->
      <div class="md:hidden">
        <button
          type="button"
          id="mobile-menu-button"
          class="nav-link inline-flex items-center justify-center p-2 rounded-md text-white hover:text-primary transition-colors"
          aria-expanded="false"
          aria-label="Toggle navigation menu"
        >
          <svg class="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor" aria-hidden="true">
            <title>Menu icon</title>
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 6h16M4 12h16M4 18h16" />
          </svg>
        </button>
      </div>
    </div>

    <!-- Mobile menu -->
    <div id="mobile-menu" class="hidden md:hidden mt-2 rounded-3xl border border-gray-200 bg-white overflow-hidden max-h-[calc(100vh-8rem)] overflow-y-auto scrollbar-thin scrollbar-thumb-gray-300 scrollbar-track-gray-100 relative" role="navigation" aria-label="Mobile navigation">
      <!-- Scroll indicators -->
      <div id="scroll-top-indicator" class="absolute top-0 left-0 right-0 h-4 bg-gradient-to-b from-white to-transparent pointer-events-none z-10 opacity-0 transition-opacity duration-200"></div>
      <div id="scroll-bottom-indicator" class="absolute bottom-0 left-0 right-0 h-4 bg-gradient-to-t from-white to-transparent pointer-events-none z-10 opacity-0 transition-opacity duration-200"></div>
      
      <div class="space-y-1 p-4 pb-6">
        {navigation.map((item) => (
          item.isDropdown ? (
            <div class="space-y-1">
              <button 
                class="mobile-dropdown-toggle w-full flex items-center justify-between px-3 py-2 text-base font-medium text-dark hover:bg-gray-50 transition-colors rounded-md"
                style="font-family: var(--font-heading);"
                aria-expanded="false"
                aria-controls={`mobile-${item.name.toLowerCase()}-menu`}
              >
                <span>{item.name}</span>
                <svg class="mobile-dropdown-icon h-4 w-4 transition-transform duration-200" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 9l-7 7-7-7" />
                </svg>
              </button>
              <nav 
                id={`mobile-${item.name.toLowerCase()}-menu`}
                class="mobile-dropdown-content hidden space-y-1 pl-4"
                aria-label={`${item.name} submenu`}
              >
                {item.items.map((subItem) => (
                  <a
                    href={subItem.href}
                    class="dropdown-link block px-3 py-2 rounded-md text-sm font-medium text-dark hover:bg-gray-50 transition-colors"
                    style="font-family: var(--font-heading);"
                  >
                    {subItem.name}
                  </a>
                ))}
              </nav>
            </div>
          ) : (
            <a
              href={item.href}
              class="dropdown-link block px-3 py-2 rounded-md text-base font-medium text-dark hover:bg-gray-50 transition-colors"
              style="font-family: var(--font-heading);"
            >
              {item.name}
            </a>
          )
        ))}
        <div class="border-t border-gray-200 my-2"></div>
        <h3 class="px-3 py-2 text-base font-medium text-dark" style="font-family: var(--font-heading);">
          More
        </h3>
        <nav aria-label="Additional navigation">
          {moreItems.map((item) => (
            <a
              href={item.href}
              class="dropdown-link block px-3 py-2 rounded-md text-base font-medium text-dark hover:bg-gray-50 transition-colors"
              style="font-family: var(--font-heading);"
            >
              {item.name}
            </a>
          ))}
        </nav>
        <a
          href={ctaButton.href}
          class={`block px-3 py-2 rounded-md text-base font-medium transition-colors text-center mt-4 ${
            ctaButton.variant === 'primary' 
              ? 'text-white bg-primary hover:bg-primary-dark' 
              : ctaButton.variant === 'secondary'
              ? 'text-gray-900 bg-gray-100 hover:bg-gray-200'
              : 'text-gray-700 border border-gray-300 hover:bg-gray-50'
          }`}
          style="font-family: var(--font-heading);"
        >
          {ctaButton.text}
        </a>
      </div>
    </div>
  </nav>
</header>

<script is:inline>
  (() => {
    let cleanup = null;

    const initHeader = () => {
      // Clean up previous listeners first
      if (cleanup) cleanup();
      
      // Check if required elements exist
      const navContainer = document.getElementById('nav-container');
      const button = document.getElementById('mobile-menu-button');
      const menu = document.getElementById('mobile-menu');
      
      if (!navContainer || !button || !menu) {
        console.warn('Header elements not found, skipping initialization');
        return;
      }

      const logo = document.getElementById('header-logo');
      const navLinks = document.querySelectorAll('.nav-link');
      const scrollTopIndicator = document.getElementById('scroll-top-indicator');
      const scrollBottomIndicator = document.getElementById('scroll-bottom-indicator');
      let isMenuOpen = false;

      // Handle scroll for transparent header, logo swap, and text color
      const handleScroll = () => {
        // Always show background if mobile menu is open
        if (isMenuOpen) {
          navContainer?.classList.add('bg-white', 'shadow-sm', 'border-gray-200');
          navContainer?.classList.remove('border-white/20');
          if (logo) logo.src = '/XRA-dark-Logo.svg';
          navLinks.forEach(link => {
            link.classList.remove('text-white');
            link.classList.add('text-dark');
          });
          return;
        }

        if (window.scrollY > 20) {
          navContainer?.classList.add('bg-white', 'shadow-sm', 'border-gray-200');
          navContainer?.classList.remove('border-white/20');
          if (logo) logo.src = '/XRA-dark-Logo.svg';
          navLinks.forEach(link => {
            link.classList.remove('text-white');
            link.classList.add('text-dark');
          });
        } else {
          navContainer?.classList.remove('bg-white', 'shadow-sm', 'border-gray-200');
          navContainer?.classList.add('border-white/20');
          if (logo) logo.src = '/XRA-Logo.svg';
          navLinks.forEach(link => {
            link.classList.remove('text-dark');
            link.classList.add('text-white');
          });
        }
      };

      // Handle mobile menu scroll indicators
      const handleMenuScroll = () => {
        if (!menu || !scrollTopIndicator || !scrollBottomIndicator) return;
        
        const scrollTop = menu.scrollTop;
        const scrollHeight = menu.scrollHeight;
        const clientHeight = menu.clientHeight;
        
        // Show/hide top indicator
        if (scrollTop > 10) {
          scrollTopIndicator.style.opacity = '1';
        } else {
          scrollTopIndicator.style.opacity = '0';
        }
        
        // Show/hide bottom indicator
        if (scrollTop + clientHeight < scrollHeight - 10) {
          scrollBottomIndicator.style.opacity = '1';
        } else {
          scrollBottomIndicator.style.opacity = '0';
        }
      };

      // Handle mobile dropdown toggles
      const handleMobileDropdownToggle = (event) => {
        const button = event.currentTarget;
        const expanded = button.getAttribute('aria-expanded') === 'true';
        const content = document.getElementById(button.getAttribute('aria-controls'));
        const icon = button.querySelector('.mobile-dropdown-icon');
        
        // Close all other dropdowns first
        const allDropdownToggles = document.querySelectorAll('.mobile-dropdown-toggle');
        const allDropdownContents = document.querySelectorAll('.mobile-dropdown-content');
        
        allDropdownToggles.forEach(toggle => {
          if (toggle !== button) {
            toggle.setAttribute('aria-expanded', 'false');
            const toggleIcon = toggle.querySelector('.mobile-dropdown-icon');
            if (toggleIcon) {
              toggleIcon.style.transform = 'rotate(0deg)';
            }
          }
        });
        
        allDropdownContents.forEach(content => {
          if (content !== document.getElementById(button.getAttribute('aria-controls'))) {
            content.classList.add('hidden');
          }
        });
        
        // Toggle current dropdown
        if (expanded) {
          // Close current dropdown
          button.setAttribute('aria-expanded', 'false');
          content.classList.add('hidden');
          icon.style.transform = 'rotate(0deg)';
        } else {
          // Open current dropdown
          button.setAttribute('aria-expanded', 'true');
          content.classList.remove('hidden');
          icon.style.transform = 'rotate(180deg)';
        }
        
        // Update scroll indicators after content change
        setTimeout(() => {
          handleMenuScroll();
        }, 100);
      };

      // Mobile menu toggle handler
      const handleMenuClick = () => {
        const expanded = button.getAttribute('aria-expanded') === 'true';
        button.setAttribute('aria-expanded', (!expanded).toString());
        menu?.classList.toggle('hidden');
        isMenuOpen = !isMenuOpen;
        handleScroll(); // Update styling when menu toggles
        
        // Reset scroll indicators when menu opens
        if (isMenuOpen) {
          setTimeout(() => {
            handleMenuScroll();
          }, 100);
        }
      };

      // Initial check
      handleScroll();

      // Add event listeners
      window.addEventListener('scroll', handleScroll, { passive: true });
      button?.addEventListener('click', handleMenuClick);
      menu?.addEventListener('scroll', handleMenuScroll, { passive: true });
      
      // Add mobile dropdown toggle listeners
      const addMobileDropdownListeners = () => {
        const mobileDropdownToggles = document.querySelectorAll('.mobile-dropdown-toggle');
        mobileDropdownToggles.forEach(toggle => {
          // Remove any existing listeners first
          toggle.removeEventListener('click', handleMobileDropdownToggle);
          toggle.addEventListener('click', handleMobileDropdownToggle);
        });
      };
      
      addMobileDropdownListeners();
      
      // Store mobile dropdown cleanup
      const mobileDropdownCleanup = () => {
        const mobileDropdownToggles = document.querySelectorAll('.mobile-dropdown-toggle');
        mobileDropdownToggles.forEach(toggle => {
          toggle.removeEventListener('click', handleMobileDropdownToggle);
        });
      };

      // Store cleanup function
      cleanup = () => {
        window.removeEventListener('scroll', handleScroll);
        button?.removeEventListener('click', handleMenuClick);
        menu?.removeEventListener('scroll', handleMenuScroll);
        mobileDropdownCleanup();
      };
    };

    // Initialize immediately and also on page load
    if (document.readyState === 'loading') {
      document.addEventListener('DOMContentLoaded', initHeader);
    } else {
      initHeader();
    }
    
    // Listen for Astro page transitions and reinitialize
    document.addEventListener('astro:page-load', () => {
      // Small delay to ensure DOM is ready
      setTimeout(initHeader, 50);
    });
    
    // Also listen for Astro navigation events
    document.addEventListener('astro:before-preparation', () => {
      // Clean up before navigation
      if (cleanup) cleanup();
    });
    
    // Additional safety: reinitialize on any navigation
    document.addEventListener('astro:after-swap', () => {
      setTimeout(initHeader, 10);
    });
  })();
</script>
