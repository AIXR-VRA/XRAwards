---
interface Props {
  year: number;
  nominationsOpen?: string;
  nominationsClose?: string;
  finalistsAnnounced?: string;
  judgingPeriodStart?: string;
  judgingPeriodEnd?: string;
  awardsCeremony?: string;
}

const {
  year,
  nominationsOpen,
  nominationsClose,
  finalistsAnnounced,
  judgingPeriodStart,
  judgingPeriodEnd,
  awardsCeremony,
} = Astro.props;

const formatDate = (dateStr: string | undefined): string => {
  if (!dateStr) return '';
  const date = new Date(dateStr);
  const day = date.getDate().toString().padStart(2, '0');
  const month = date.toLocaleString('en-US', { month: 'short' });
  const yearNum = date.getFullYear();
  return `${day} ${month} ${yearNum}`;
};

const getDay = (dateStr: string | undefined): string => {
  if (!dateStr) return '';
  const date = new Date(dateStr);
  return date.getDate().toString().padStart(2, '0');
};

const getMonth = (dateStr: string | undefined): string => {
  if (!dateStr) return '';
  const date = new Date(dateStr);
  return date.toLocaleString('en-US', { month: 'short' });
};

interface KeyDate {
  date: string;
  label: string;
  sublabel?: string;
  color: 'pink' | 'purple' | 'cyan' | 'orange';
}

const keyDates: KeyDate[] = [
  nominationsOpen && {
    date: nominationsOpen,
    label: formatDate(nominationsOpen),
    sublabel: 'Nominations Open',
    color: 'pink' as const,
  },
  nominationsClose && {
    date: nominationsClose,
    label: formatDate(nominationsClose),
    sublabel: 'Nominations Close\n(Late Fees Apply)',
    color: 'pink' as const,
  },
  finalistsAnnounced && {
    date: finalistsAnnounced,
    label: formatDate(finalistsAnnounced),
    sublabel: 'Finalists Announced',
    color: 'cyan' as const,
  },
  judgingPeriodStart && judgingPeriodEnd && {
    date: judgingPeriodStart,
    label: `${getDay(judgingPeriodStart)} ${getMonth(judgingPeriodStart)} - ${getDay(judgingPeriodEnd)} ${getMonth(judgingPeriodEnd)}`,
    sublabel: 'Judging Period',
    color: 'orange' as const,
  },
  awardsCeremony && {
    date: awardsCeremony,
    label: formatDate(awardsCeremony),
    sublabel: 'Awards Ceremony',
    color: 'purple' as const,
  },
].filter(Boolean) as KeyDate[];

const colorClasses = {
  pink: {
    bg: 'bg-pink-500',
    border: 'border-pink-500',
    text: 'text-pink-500',
    glow: 'shadow-pink-500/50'
  },
  purple: {
    bg: 'bg-purple-500',
    border: 'border-purple-500',
    text: 'text-purple-500',
    glow: 'shadow-purple-500/50'
  },
  cyan: {
    bg: 'bg-cyan-500',
    border: 'border-cyan-500',
    text: 'text-cyan-500',
    glow: 'shadow-cyan-500/50'
  },
  orange: {
    bg: 'bg-orange-500',
    border: 'border-orange-500',
    text: 'text-orange-500',
    glow: 'shadow-orange-500/50'
  },
};
---

<div class="relative py-16">
  <!-- Decorative gradient background -->
  <div class="absolute inset-0 bg-gradient-to-br from-[#1e1b3c] via-[#2a2550] to-[#1e1b3c] rounded-2xl"></div>

  <!-- Subtle grid pattern overlay -->
  <div class="absolute inset-0 opacity-5" style="background-image: radial-gradient(circle, white 1px, transparent 1px); background-size: 30px 30px;"></div>

  <div class="relative">
    <!-- Timeline Container -->
    <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-5 gap-6 lg:gap-4 px-8 lg:px-12">
      {keyDates.map((item, index) => (
        <div class="relative group">
          <!-- Connecting Line (desktop only) -->
          {index < keyDates.length - 1 && (
            <div class="hidden lg:block absolute top-16 left-full w-full h-0.5 bg-gradient-to-r from-white/20 to-transparent -translate-x-0 z-0"></div>
          )}

          <!-- Date Card -->
          <div class="relative bg-white/5 backdrop-blur-sm rounded-xl p-6 border border-white/10 hover:border-white/30 transition-all duration-300 hover:shadow-2xl hover:shadow-white/10 hover:-translate-y-1">
            <!-- Icon with glow effect -->
            <div class="flex justify-center mb-4">
              <div class={`w-20 h-20 ${colorClasses[item.color].bg} rounded-full flex items-center justify-center shadow-lg ${colorClasses[item.color].glow} transition-transform duration-300 group-hover:scale-110`}>
                <svg
                  class="w-10 h-10 text-white"
                  fill="none"
                  stroke="currentColor"
                  viewBox="0 0 24 24"
                >
                  <path
                    stroke-linecap="round"
                    stroke-linejoin="round"
                    stroke-width={2}
                    d="M8 7V3m8 4V3m-9 8h10M5 21h14a2 2 0 002-2V7a2 2 0 00-2-2H5a2 2 0 00-2 2v12a2 2 0 002 2z"
                  />
                </svg>
              </div>
            </div>

            <!-- Date -->
            <div class="text-center mb-3">
              <div class="text-lg md:text-xl font-bold text-white leading-tight">
                {item.label}
              </div>
            </div>

            <!-- Label -->
            <div class="text-center">
              <div class={`text-sm md:text-base font-medium ${colorClasses[item.color].text} whitespace-pre-line leading-snug`}>
                {item.sublabel}
              </div>
            </div>

            <!-- Decorative corner accent -->
            <div class={`absolute top-0 right-0 w-12 h-12 ${colorClasses[item.color].bg} opacity-10 rounded-bl-full rounded-tr-xl`}></div>
          </div>
        </div>
      ))}
    </div>

    <!-- Bottom decorative elements -->
    <div class="absolute -bottom-4 left-1/4 w-32 h-32 bg-pink-500/10 rounded-full blur-3xl"></div>
    <div class="absolute -bottom-4 right-1/4 w-32 h-32 bg-purple-500/10 rounded-full blur-3xl"></div>
  </div>
</div>
