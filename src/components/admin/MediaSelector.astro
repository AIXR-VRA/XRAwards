---
/**
 * Reusable Media Selector Component
 * Allows selecting media from the media library
 * 
 * Props:
 * - multiple: boolean - Allow multiple selections (default: false)
 * - mimeTypes: string - Comma-separated list of mime types to filter (default: images only)
 * - onSelect: string - JavaScript function name to call when media is selected
 */

interface Props {
  multiple?: boolean;
  mimeTypes?: string;
  label?: string;
  helpText?: string;
}

const { 
  multiple = false, 
  mimeTypes = 'image/jpeg,image/png,image/webp,image/gif',
  label = 'Media',
  helpText = 'Select media from library'
} = Astro.props;

// Generate unique ID for this instance
const uniqueId = `media-selector-${Math.random().toString(36).substring(7)}`;
---

<div class="media-selector-component" data-selector-id={uniqueId}>
  <label class="block text-sm font-medium text-gray-700 mb-1">
    {label}
  </label>
  <div class="border border-gray-300 rounded-lg p-3 min-h-[120px]">
    <div id={`selected-media-${uniqueId}`} class="flex flex-wrap gap-2 mb-2"></div>
    <button
      type="button"
      id={`open-browser-${uniqueId}`}
      class="w-full px-3 py-2 border border-gray-200 rounded text-sm text-blue-600 hover:bg-blue-50 focus:outline-hidden focus:ring-2 focus:ring-blue-500"
    >
      + Browse Media Library
    </button>
  </div>
  <p class="text-xs text-gray-500 mt-1">{helpText}</p>
</div>

<!-- Media Browser Modal -->
<div id={`media-browser-${uniqueId}`} class="hidden fixed inset-0 bg-black/50 items-center justify-center z-50 p-4" style="z-index: 9999;">
  <div class="bg-white rounded-lg max-w-5xl w-full p-6 max-h-[90vh] overflow-y-auto">
    <div class="flex items-center justify-between mb-6">
      <h2 class="text-xl font-semibold text-gray-900">Select Media from Library</h2>
      <button id={`close-browser-${uniqueId}`} class="text-gray-400 hover:text-gray-600">
        <svg class="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12" />
        </svg>
      </button>
    </div>

    <!-- Search -->
    <div class="mb-4">
      <input
        type="text"
        id={`search-media-${uniqueId}`}
        placeholder="Search media..."
        class="w-full px-4 py-2 border border-gray-300 rounded-lg focus:outline-hidden focus:ring-2 focus:ring-blue-500"
      />
    </div>

    <!-- Media Grid -->
    <div id={`media-grid-${uniqueId}`} class="grid grid-cols-2 md:grid-cols-3 lg:grid-cols-4 gap-4">
      <div class="col-span-full text-center py-8 text-gray-500">
        Loading media...
      </div>
    </div>
  </div>
</div>

<script define:vars={{ uniqueId, multiple, mimeTypes }}>
  (function() {
    const selectorId = uniqueId;
    const allowMultiple = multiple;
    const filterMimeTypes = mimeTypes;
    
    let availableMedia = [];
    let selectedMedia = [];
    let searchQuery = '';

    // Elements
    const selectedContainer = document.getElementById(`selected-media-${selectorId}`);
    const openButton = document.getElementById(`open-browser-${selectorId}`);
    const modal = document.getElementById(`media-browser-${selectorId}`);
    const closeButton = document.getElementById(`close-browser-${selectorId}`);
    const grid = document.getElementById(`media-grid-${selectorId}`);
    const searchInput = document.getElementById(`search-media-${selectorId}`);

    // Load media from library
    async function loadMedia() {
      try {
        const params = new URLSearchParams({ limit: '100' });
        if (filterMimeTypes) {
          params.append('mimeTypes', filterMimeTypes);
        }
        
        const response = await fetch(`/api/media?${params}`);
        const data = await response.json();
        if (!response.ok) throw new Error(data.error);
        
        availableMedia = data.media || [];
      } catch (error) {
        console.error('Error loading media:', error);
      }
    }

    // Render selected media
    function renderSelected() {
      if (selectedMedia.length === 0) {
        selectedContainer.innerHTML = '<p class="text-sm text-gray-400 italic">No media selected</p>';
        return;
      }
      
      selectedContainer.innerHTML = selectedMedia.map(media => `
        <div class="relative group">
          <img src="${media.file_url}" alt="${media.title || media.filename}" class="w-20 h-20 object-cover rounded-lg border-2 border-blue-500" />
          <button
            type="button"
            data-media-id="${media.id}"
            class="media-remove-btn absolute -top-2 -right-2 bg-red-500 text-white rounded-full p-1 hover:bg-red-600 transition-colors"
          >
            <svg class="w-3 h-3" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12" />
            </svg>
          </button>
        </div>
      `).join('');
      
      // Add click handlers to remove buttons
      selectedContainer.querySelectorAll('.media-remove-btn').forEach(btn => {
        btn.addEventListener('click', (e) => {
          e.preventDefault();
          const mediaId = btn.getAttribute('data-media-id');
          if (mediaId) removeMedia(mediaId);
        });
      });
    }

    // Render media grid
    function renderGrid() {
      const filtered = searchQuery 
        ? availableMedia.filter(m => 
            (m.title || '').toLowerCase().includes(searchQuery.toLowerCase()) ||
            (m.filename || '').toLowerCase().includes(searchQuery.toLowerCase())
          )
        : availableMedia;
      
      if (filtered.length === 0) {
        grid.innerHTML = `
          <div class="col-span-full text-center py-8 text-gray-500">
            ${availableMedia.length === 0 
              ? 'No media found. <a href="/admin/media-library" class="text-blue-600 hover:underline">Upload some media first</a>.'
              : 'No media matches your search.'
            }
          </div>
        `;
        return;
      }
      
      const selectedIds = selectedMedia.map(m => m.id);
      
      grid.innerHTML = filtered.map(media => `
        <button
          type="button"
          data-media-id="${media.id}"
          class="media-select-btn border-2 ${selectedIds.includes(media.id) ? 'border-blue-500 bg-blue-50' : 'border-gray-200 hover:border-blue-300'} rounded-lg overflow-hidden transition-all"
        >
          <img src="${media.file_url}" alt="${media.title || media.filename}" class="w-full aspect-square object-cover" />
          <div class="p-2 bg-white">
            <p class="text-xs font-medium truncate">${media.title || media.filename}</p>
            <p class="text-xs text-gray-500">${media.file_size >= 1000000 ? (media.file_size / 1000 / 1000).toFixed(2) + ' MB' : (media.file_size / 1000).toFixed(2) + ' kB'}</p>
          </div>
        </button>
      `).join('');
      
      // Add click handlers to all buttons
      grid.querySelectorAll('.media-select-btn').forEach(btn => {
        btn.addEventListener('click', (e) => {
          e.preventDefault();
          const mediaId = btn.getAttribute('data-media-id');
          if (mediaId) selectMedia(mediaId);
        });
      });
    }

    // Select media
    function selectMedia(mediaId) {
      const media = availableMedia.find(m => m.id === mediaId);
      if (!media) return;
      
      if (allowMultiple) {
        if (!selectedMedia.find(m => m.id === mediaId)) {
          selectedMedia.push(media);
          renderSelected();
          renderGrid();
        }
      } else {
        // Single selection - replace
        selectedMedia = [media];
        renderSelected();
        closeModal();
      }
      
      // Dispatch custom event
      document.dispatchEvent(new CustomEvent(`mediaSelected_${selectorId}`, {
        detail: { media: allowMultiple ? selectedMedia : media }
      }));
    }

    // Remove media
    function removeMedia(mediaId) {
      selectedMedia = selectedMedia.filter(m => m.id !== mediaId);
      renderSelected();
      renderGrid();
      
      // Dispatch custom event
      document.dispatchEvent(new CustomEvent(`mediaRemoved_${selectorId}`, {
        detail: { mediaId, media: selectedMedia }
      }));
    }

    // Open modal
    function openModal() {
      modal.classList.remove('hidden');
      modal.classList.add('flex');
      renderGrid();
    }

    // Close modal
    function closeModal() {
      modal.classList.add('hidden');
      modal.classList.remove('flex');
    }

    // Get selected media (for parent components)
    function getSelected() {
      return selectedMedia;
    }

    // Set selected media (for parent components)
    function setSelected(media) {
      selectedMedia = Array.isArray(media) ? media : (media ? [media] : []);
      renderSelected();
    }

    // Clear selection
    function clearSelected() {
      selectedMedia = [];
      renderSelected();
    }
    
    // Expose functions to window for parent components
    window[`getSelectedMedia_${selectorId}`] = getSelected;
    window[`setSelectedMedia_${selectorId}`] = setSelected;
    window[`clearSelectedMedia_${selectorId}`] = clearSelected;

    // Event listeners
    openButton.addEventListener('click', openModal);
    closeButton.addEventListener('click', closeModal);
    searchInput.addEventListener('input', (e) => {
      searchQuery = e.target.value;
      renderGrid();
    });

    // Initial load
    loadMedia().then(() => {
      renderSelected();
    });

    // Make selector ID available globally for parent
    window[`MediaSelector_${selectorId}`] = {
      getId: () => selectorId,
      getSelected: getSelected,
      setSelected: setSelected,
      clear: clearSelected
    };
  })();
</script>

